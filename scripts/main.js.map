{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/main.js","../.tmp/scripts/app/scripts/tubemap.js","../.tmp/scripts/config.default.json","../.tmp/scripts/config.json","../.tmp/scripts/node_modules/merge-json/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","getPathNames","xgFile","$","val","ajax","type","url","BACKEND_URL","crossDomain","data","dataType","success","response","document","getElementById","pathNames","forEach","fn","createElement","append","error","responseData","textStatus","errorThrown","console","log","prepareForTubeMap","d3","select","selectAll","remove","attr","w","width","html","setAttribute","getRemoteTubeMapData","nodeID","value","distance","byNode","selectedIndex","gbwtFile","gamIndex","anchorTrackName","useMountedPath","DATA_SOURCES","ds","name","isEmptyObject","style","display","nodes","tubeMap","vgExtractNodes","graph","tracks","vgExtractTracks","createTubeMap","vgExtractReads","gam","reads","create","svgID","populateDropdownsWithFilenames","xgSelect","xgFiles","filename","opt","innerHTML","appendChild","gbwtSelect","gbwtFiles","gamIndexSelect","gamIndices","_mergeJson","mergeJSON","_tubemap","CONFIG","merge","err","window","location","host","change","prop","defaultPosition","empty","onclick","position","Number","Math","max","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","click","removeChild","onload","dsSelect","params","svg","inputNodes","JSON","parse","stringify","inputTracks","inputReads","bed","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","sequence","charAt","substr","indexOf","push","node","seq","split","reverse","join","changeTrackVisibility","trackID","id","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","undefined","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","path","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","track","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","result","tracksOrReads","allNodes","x","pixelWidth","min","zoom","behavior","scaleExtent","on","event","translate","scale","svg2","parent","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","currentX","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","line","start","end","continue","features","allAreFour","round","freq","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","c","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","pattern","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","addEventListener","each","vg","getComputedTextLength","isCompletelyReverse","mapping","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","parseInt","firstIndex","lastIndex","edit","offset","toString","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut","defineProperty","jsonC","constructor","isJSON","json","json1","json2","isArray"],"mappings":"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AA4G,kBAAAA,EACA5G,EAAA+G,iBAAAA,EACA/G,EAAA8G,iBAAAA,EACA9G,EAAAqH,YAAAA,EACArH,EAAA6G,mBAAAA,EACA7G,EAAAoa,eAAAA,GACApa,EAAAoE,eAAAA,GACApE,EAAAuE,gBAAAA,GACAvE,EAAAyE,eAAAA,EACA,IAAAmI,KAAA,EACAmO,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAD,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAI,IACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEAV,MACAE,MACAC,MACAC,MACA7V,OAAA,GACA2D,OAAA,GACAC,MACAI,MACAC,MACA5E,OAAA,GACAI,OAAA,GACAK,OAAA,GACA8H,OAAA,GACAC,OAAA,GACAT,OAAA,GACAkC,OAAA,GACA1C,MACAC,MACAC,MACAkB,OAAA,GACA7D,IACA+B,gBAAA,EACA9B,oBAAA,EACA6B,eAAA,EACAuP,YAAA,EACAnP,gBAAA,EACAD,WAAA,EACAD,eAAA,EACAsP,gBAAA,QACAE,kBAAA,OACAC,kBAAA,QACAC,WAAA,cACAvR,gBAAA,GAEAiC,MACAC,MACAC,MACAC,MACAC,MACAI,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,OAAA,GACAhD,OAAA,2BC7GA3I,EAAAJ,SAAAqB,aAAA,EACAuC,eACAE,KAAA,eACA/C,OAAA,qBACA0C,SAAA,0BACAC,gBAAA,KACAC,gBAAA,EACAyC,gBAAA,MACAtC,KAAA,SACA/C,OAAA,eACA0C,SAAA,2BACAC,gBAAA,MACAC,gBAAA,EACAyC,gBAAA,MACAtC,KAAA,qBACA/C,OAAA,UACAyC,SAAA,YACAE,gBAAA,IACAC,gBAAA,EACAyC,gBAAA,+BCnBAhG,EAAAJ,SAAAqB,YAAA,yBACAuC,eACAE,KAAA,WACA/C,OAAA,iBACA0C,SAAA,8BACAC,gBAAA,KACAC,gBAAA,EACAyC,gBAAA,sCCNA,GAAA+c,MAAAC,YAEAC,EAAA,SAAAC,GACA,SAAAA,GAAAA,EAAAF,cAAAD,GAOAnjB,GAAAqjB,OAAAA,CAGA,IAAA3d,GAAA,SAAA6d,EAAAC,GACA,GAAAjQ,GAAA,IACA,IAAA8P,EAAAG,GAAA,CAEA,GADAjQ,KACA8P,EAAAE,GACA,IAAA,GAAA9iB,KAAA8iB,GACAhQ,EAAA9S,GAAA8iB,EAAA9iB,EAIA,KAAA,GAAAA,KAAA+iB,GACA,gBAAAjQ,GAAA9S,IAAA,gBAAA+iB,GACAjQ,EAAA9S,GAAAiF,EAAA6N,EAAA9S,GAAA+iB,EAAA/iB,IAEA8S,EAAA9S,GAAA+iB,EAAA/iB,OAGA,IAAAyV,MAAAuN,QAAAF,IAAArN,MAAAuN,QAAAD,GAAA,CACAjQ,EAAAgQ,CAEA,KAAA,GAAA5jB,GAAA,EAAAA,EAAA6jB,EAAAtjB,OAAAP,KACA,IAAA4T,EAAArJ,QAAAsZ,EAAA7jB,MACA4T,EAAAA,EAAArT,QAAAsjB,EAAA7jB,QAIA4T,GAAAiQ,CAGA,OAAAjQ,GAGAvT,GAAA6F,MAAAH","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\nvar _mergeJson = require('merge-json');\nvar mergeJSON = _interopRequireWildcard(_mergeJson);\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nvar CONFIG = require('../../config.default.json');\ntry {\n    CONFIG = mergeJSON.merge(CONFIG, require('../../config.json'));\n} catch (err) {\n}\nvar BACKEND_URL = CONFIG.BACKEND_URL || 'http://' + window.location.host;\nvar DATA_SOURCES = CONFIG.DATA_SOURCES;\n$('#dataSourceSelect').change(function () {\n    $('#distance').prop('value', '100');\n    $('#unitSelect').prop('value', '1');\n    if ($('#dataSourceSelect').val() === 'custom') {\n        $('#xgFileSelect').prop('disabled', false);\n        $('#gbwtFileSelect').prop('disabled', false);\n        $('#gamIndexSelect').prop('disabled', false);\n        $('#pathNameSelect').prop('disabled', false);\n        $('#position').prop('value', '1');\n    } else {\n        $('#xgFileSelect').prop('disabled', true);\n        $('#gbwtFileSelect').prop('disabled', true);\n        $('#gamIndexSelect').prop('disabled', true);\n        $('#pathNameSelect').prop('disabled', true);\n        DATA_SOURCES.forEach(function (ds) {\n            if (ds.name === $('#dataSourceSelect').val()) {\n                $('#position').prop('value', ds.defaultPosition);\n            }\n        });\n    }\n});\n$('#xgFileSelect').change(function () {\n    $('#pathNameSelect').empty();\n    if ($('#xgFileSelect').val() === 'none') {\n    } else {\n        getPathNames();\n    }\n});\nfunction getPathNames() {\n    var xgFile = $('#xgFileSelect').val();\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getPathNames',\n        crossDomain: true,\n        data: { xgFile: xgFile },\n        dataType: 'json',\n        success: function success(response) {\n            var pathNameSelect = document.getElementById('pathNameSelect');\n            response.pathNames.forEach(function (fn) {\n                var opt = document.createElement('option');\n                $('#pathNameSelect').append('<option value=\"' + fn + '\" selected>' + fn + '</option>');\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\ndocument.getElementById('goButton').onclick = function () {\n    prepareForTubeMap();\n};\ndocument.getElementById('goLeftButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = Math.max(position - distance, 0);\n    prepareForTubeMap();\n};\ndocument.getElementById('goRightButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = position + distance;\n    prepareForTubeMap();\n};\nfunction prepareForTubeMap() {\n    d3.select('#svg').selectAll('*').remove();\n    d3.select('#svg').attr('width', 100);\n    var w = $('.tubeMapSVG').width();\n    $('#legendDiv').html('');\n    document.getElementById('loader').setAttribute('style', 'left:' + (w / 2 - 25) + 'px');\n    getRemoteTubeMapData();\n}\nfunction getRemoteTubeMapData() {\n    var nodeID = document.getElementById('position').value;\n    var distance = document.getElementById('distance').value;\n    var byNode = document.getElementById('unitSelect').selectedIndex !== 0;\n    var xgFile = $('#xgFileSelect').val();\n    var gbwtFile = $('#gbwtFileSelect').val();\n    var gamIndex = $('#gamIndexSelect').val();\n    var anchorTrackName = $('#pathNameSelect').val();\n    var useMountedPath = true;\n    DATA_SOURCES.forEach(function (ds) {\n        if (ds.name === $('#dataSourceSelect').val()) {\n            console.log('found');\n            xgFile = ds.xgFile;\n            gbwtFile = ds.gbwtFile;\n            gamIndex = ds.gamIndex;\n            anchorTrackName = ds.anchorTrackName;\n            useMountedPath = ds.useMountedPath;\n        }\n    });\n    console.log('useMountedPath = ' + useMountedPath);\n    console.log('anchorTrackName = ' + anchorTrackName);\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/chr22_v4',\n        crossDomain: true,\n        data: {\n            nodeID: nodeID,\n            distance: distance,\n            byNode: byNode,\n            xgFile: xgFile,\n            gbwtFile: gbwtFile,\n            gamIndex: gamIndex,\n            anchorTrackName: anchorTrackName,\n            useMountedPath: useMountedPath\n        },\n        dataType: 'json',\n        success: function success(response) {\n            if ($.isEmptyObject(response)) {\n                console.log('empty');\n                document.getElementById('loader').style.display = 'none';\n                return;\n            }\n            var nodes = tubeMap.vgExtractNodes(response.graph);\n            var tracks = tubeMap.vgExtractTracks(response.graph);\n            var reads = tubeMap.vgExtractReads(nodes, tracks, response.gam);\n            createTubeMap(nodes, tracks, reads);\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction createTubeMap(nodes, tracks, reads) {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    document.getElementById('loader').style.display = 'none';\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true)\n        tubeMap.setMergeNodesFlag(true);\n    else\n        tubeMap.setMergeNodesFlag(false);\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true)\n        tubeMap.setNodeWidthOption(1);\n    else\n        tubeMap.setNodeWidthOption(0);\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true)\n        tubeMap.setShowReadsFlag(true);\n    else\n        tubeMap.setShowReadsFlag(false);\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true)\n        tubeMap.setSoftClipsFlag(true);\n    else\n        tubeMap.setSoftClipsFlag(false);\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\nfunction populateDropdownsWithFilenames() {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getFilenames',\n        crossDomain: true,\n        success: function success(response) {\n            var xgSelect = document.getElementById('xgFileSelect');\n            response.xgFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                xgSelect.appendChild(opt);\n            });\n            var gbwtSelect = document.getElementById('gbwtFileSelect');\n            response.gbwtFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                gbwtSelect.appendChild(opt);\n            });\n            var gamIndexSelect = document.getElementById('gamIndexSelect');\n            response.gamIndices.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                gamIndexSelect.appendChild(opt);\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nwindow.onload = function () {\n    var dsSelect = document.getElementById('dataSourceSelect');\n    DATA_SOURCES.forEach(function (ds) {\n        var opt = document.createElement('option');\n        opt.value = ds.name;\n        opt.innerHTML = ds.name;\n        dsSelect.appendChild(opt);\n    });\n    var opt = document.createElement('option');\n    opt.value = 'custom';\n    opt.innerHTML = 'custom';\n    dsSelect.appendChild(opt);\n    document.getElementById('goButton').click();\n    populateDropdownsWithFilenames();\n};","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            console.log('adding to ' + node.name);\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    console.log('Reads:');\n    console.log(reads);\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    var zoom = d3.behavior.zoom().scaleExtent([\n            0.1,\n            5\n        ]).on('zoom', function () {\n            svg.attr('transform', 'translate(' + d3.event.translate + ') scale(' + d3.event.scale + ')');\n        });\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    zoom.translate([\n        0,\n        -minYCoordinate + 25\n    ]);\n    zoom.event(svg);\n    var svg2 = d3.select(svgID);\n    svg2.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg2.attr('width', Math.max(maxXCoordinate, $(svgID).parent().width()));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-')\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    else\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-')\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    else\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-')\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                else\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true)\n                    leftSideEdges[track.path[_i2].order] += 1;\n                else\n                    rightSideEdges[track.path[_i2].order] += 1;\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull)\n                currentY += 10;\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null)\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end)\n                        feature.start = 0;\n                    if (nodeStart < line.start && nodeEnd >= line.start)\n                        feature.start = line.start - nodeStart;\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end)\n                        feature.end = line.end - nodeStart;\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        } else {\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined)\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            else\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (_i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var pattern = svg.append('defs').append('pattern').attr({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase'))\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order)\n        return -1;\n    else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order)\n        return 1;\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return -1;\n    else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    console.log(myReads);\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(parseInt(node.name, 10));\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            console.log('read ' + i + ' is empty');\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}","module.exports={ \"BACKEND_URL\": false,\n  \"DATA_SOURCES\": [\n  { \"name\": \"snp1kg-BRCA1\",\n    \"xgFile\": \"snp1kg-BRCA1.vg.xg\",\n    \"gamIndex\": \"NA12878-BRCA1.gam.index\",\n    \"anchorTrackName\": \"17\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n  { \"name\": \"cactus\",\n    \"xgFile\": \"cactus.vg.xg\",\n    \"gamIndex\": \"cactus-NA12879.gam.index\",\n    \"anchorTrackName\": \"ref\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n  { \"name\": \"vg \\\"small\\\" example\",\n    \"xgFile\": \"x.vg.xg\",\n    \"gbwtFile\": \"x.vg.gbwt\",\n    \"anchorTrackName\": \"x\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n]}\n\n","module.exports={\"BACKEND_URL\": \"https://api.wbeyer.com\",\n  \"DATA_SOURCES\": [\n  { \"name\": \"chr22_v4\",\n      \"xgFile\": \"chr22_v4.vg.xg\",\n      \"gamIndex\": \"NA12878_mapped_v4.gam.index\",\n      \"anchorTrackName\": \"22\",\n      \"useMountedPath\": false,\n      \"defaultPosition\": \"17697661\" },\n  ]}\n","// JSON Konstruktor für die Überprüfung ob ein Objekt JSON ist\r\nvar jsonC = {}.constructor ;\r\n\r\nvar isJSON = function(json){\r\n\tif(json && json.constructor === jsonC){\r\n\t\treturn true ;\r\n\t}else{\r\n\t\treturn false ;\r\n\t}\r\n}\r\n\r\nexports.isJSON = isJSON ;\r\n\r\n\r\nvar mergeJSON = function(json1, json2){\r\n\tvar result = null ;\r\n\tif(isJSON(json2)){\r\n\t\tresult = {} ;\r\n\t\tif(isJSON(json1)){\r\n\t\t\tfor(var key in json1){\r\n\t\t\t\tresult[key] = json1[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in json2){\r\n\t\t\tif(typeof result[key] === \"object\" && typeof json2 === \"object\"){\r\n\t\t\t\tresult[key] = mergeJSON(result[key], json2[key]) ;\r\n\t\t\t}else{\r\n\t\t\t\tresult[key] = json2[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(Array.isArray(json1) && Array.isArray(json2)){\r\n\t\tresult = json1 ;\r\n\r\n\t\tfor(var i = 0; i < json2.length; i++){\r\n\t\t\tif(result.indexOf(json2[i]) === -1){\r\n\t\t\t\tresult[result.length] = json2[i] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tresult = json2 ;\r\n\t}\r\n\r\n\treturn result ;\r\n}\r\n\r\nexports.merge = mergeJSON ;\r\n"]}