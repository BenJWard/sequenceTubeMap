{"version":3,"sources":["../.tmp/scripts/node_modules/browser-pack/_prelude.js","../.tmp/scripts/app/scripts/main.js","../.tmp/scripts/app/scripts/tubemap.js","../.tmp/scripts/config.default.json","../.tmp/scripts/config.json","../.tmp/scripts/node_modules/merge-json/index.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","getPathNames","xgFile","$","val","ajax","type","url","BACKEND_URL","crossDomain","data","dataType","success","response","optNone","document","getElementById","createElement","value","innerHTML","append","pathNames","forEach","fn","error","responseData","textStatus","errorThrown","console","log","prepareForTubeMap","d3","select","selectAll","remove","attr","w","width","html","setAttribute","getRemoteTubeMapData","nodeID","distance","byNode","selectedIndex","gbwtFile","gamIndex","anchorTrackName","useMountedPath","DATA_SOURCES","ds","name","undefined","graph","innerText","style","display","nodes","tubeMap","vgExtractNodes","tracks","vgExtractTracks","createTubeMap","vgExtractReads","gam","reads","create","svgID","clearDropdownsWithFilenames","xgSelect","hasChildNodes","removeChild","lastChild","opt1","appendChild","gbwtSelect","opt2","gamIndexSelect","opt3","populateDropdownsWithFilenames","xgSelectValue","options","gbwtSelectValue","gamSelectValue","xgFiles","filename","opt","selected","gbwtFiles","gamIndices","setUpWebsocket","ws","WebSocket","replace","onmessage","message","onclose","event","setTimeout","onerror","close","_mergeJson","mergeJSON","_tubemap","CONFIG","merge","err","window","location","host","change","prop","defaultPosition","empty","onclick","position","Number","Math","max","checked","setMergeNodesFlag","setNodeWidthOption","setShowReadsFlag","setSoftClipsFlag","radios","getElementsByClassName","trackType","colorSet","this","setColorSet","svgN","svgData","XMLSerializer","serializeToString","svgBlob","Blob","svgUrl","URL","createObjectURL","downloadLink","href","download","body","click","onload","dsSelect","params","svg","inputNodes","JSON","parse","stringify","inputTracks","inputReads","bed","config","clickableNodesFlag","clickableNodes","hideLegendFlag","hideLegend","drawLegend","moveTrackToFirstPosition","index","unshift","splice","straightenTrack","j","nodesToInvert","currentSequence","nodeName","sequence","charAt","substr","indexOf","push","node","seq","split","reverse","join","changeTrackVisibility","trackID","id","hidden","changeExonVisibility","showExonsFlag","mergeNodesFlag","showSoftClips","showReads","nodeWidthOption","trackRectangles","trackCurves","trackCorners","trackVerticalRectangles","trackRectanglesStep3","assignments","extraLeft","extraRight","maxYCoordinate","minYCoordinate","maxXCoordinate","trackForRuler","assignColorSets","nodeMap","generateNodeMap","generateTrackIndexSequences","generateNodeWidth","generateNodeSuccessors","generateNodeOrder","reverseReversedReads","mergeNodes","numberOfNodes","numberOfTracks","generateNodeDegree","DEBUG","maxOrder","getMaxOrder","calculateTrackWidth","generateLaneAssignment","addTrackFeatures","generateNodeXCoords","generateReadOnlyNodeAttributes","placeReads","concat","generateSVGShapesFromPath","getImageDimensions","alignSVG","defineSVGPatterns","drawTrackRectangles","drawTrackCurves","drawReversalsByColor","dNodes","removeUnusedNodes","drawNodes","drawLabels","drawRuler","drawMismatches","nodesPerOrder","orderY","Map","has","order","set","y","contentHeight","get","assignReadsToNodes","incomingReads","outgoingReads","internalReads","read","idx","path","element","pathIdx","generateBasicPathsForReads","sortedNodes","slice","sort","compareNodesByOrder","compareReadIncomingSegmentsByComingFrom","currentY","occupiedUntil","readElement","setOccupiedUntil","maxY","compareReadOutgoingSegmentsByGoingTo","occupiedFrom","firstNodeOffset","incReadElementIndices","incRead","incReadPathElement","compareInternalReads","readIdx","currentRead","finalNodeCoverLength","heightIncrease","adjustVertically3","bottomY","calculateBottomY","elementsWithoutNode","readIndex","pathIndex","previousY","compareNoNodeReadsByPreviousY","segment","map","sequenceLength","b","segmentA","segmentB","pathIndexA","pathIndexB","nodeA","nodeB","beginDiff","pathA","pathB","idxA","idxB","track","currentNodeIndex","currentNodeIsForward","currentNode","previousNode","previousNodeIsForward","isPositive","abs","indexSequence","isForward","_j","pos","is_reverse","sequenceNew","_i","nodeWidth","mismatches","mm","getReverseComplement","temp","seqLength","s","result","tracksOrReads","allNodes","x","pixelWidth","min","zoom","behavior","scaleExtent","on","translate","scale","svg2","parent","current","follower","successors","predecessors","generateNodeOrderOfSingleTrack","forwardOrder","backwardOrder","minOrder","nodeIndex","increaseOrderForAllNodes","generateNodeOrderTrackBeginning","anchorIndex","currentOrder","increment","modifiedSequence","rightIndex","leftIndex","tracksAndReads","uninvert","increaseOrderForSuccessors","isSuccessor","degree","_j2","_j3","_j4","first","second","visited","Array","fill","stack","pop","childIndex","amount","startingNode","tabuNode","newOrder","increasedOrders","queue","shift","successor","predecessor","currentX","nextX","extra","calculateExtraSpace","leftSideEdges","rightSideEdges","_i2","_i3","segmentNumber","prevSegmentPerOrderPerTrack","trackNo","lane","addToAssignment","_i4","_j5","_j6","_i5","generateSingleLaneAssignment","segmentID","compareToFromSame","getIdealLanesAndCoords","assignment","idealLane","idealY","currentLane","potentialAdjustmentValues","Set","prevNameIsNull","prevTrack","compareByIdealLane","topLane","add","adjustVertically","verticalAdjustment","minAdjustmentCost","MAX_SAFE_INTEGER","moveBy","getVerticalAdjustmentCost","adjustBy","assignmentNode","aNode","nodeStart","nodeEnd","feature","line","start","end","continue","features","allAreFour","round","freq","useColorScheme","colorScheme","haplotypeColors","getColorSet","forwardReadColors","reverseReadColors","exonColors","colorSetName","plainColors","reds","blues","greys","lightColors","generateTrackColor","highlight","getReadXStart","getXCoordinateOfBaseWithinNode","getReadXEnd","base","nodeLeftX","nodeRightX","xStart","xEnd","yStart","yEnd","trackColor","dummy","reversalFlag","orderStartX","orderEndX","_i6","createFeatureRectangle","color","laneChange","generateForwardToReverse","generateReverseToForward","nodeXStart","nodeXEnd","rectXStart","currentHighlight","co","featureXStart","featureXEnd","trackWidth","yTop","yBottom","d","corners","rectangles","rect","filter","filterObjectByAttribute","drawTrackCorners","enter","nodeMouseOver","nodeMouseOut","nodeDoubleClick","text","rulerTrackIndex","rulerTrack","markingInterval","indexOfFirstBaseInNode","indexOfFirstBase","atLeastOneMarkingDrawn","xCoordOfPreviousMarking","firstNode","drawRulerMarking","nextMarking","ceil","xCoordOfMarking","sequencePosition","xCoordinate","attribute","item","trackMouseOver","trackMouseOut","trackDoubleClick","compareCurvesByLineChanges","pattern","height","patternUnits","patternTransform","myTrackCurves","curve","xMiddle","content","listeners","addEventListener","each","vg","getComputedTextLength","isCompletelyReverse","mapping","node_id","index2","myNodes","myTracks","myReads","extracted","nodeNames","parseInt","firstIndex","lastIndex","edit","offset","toString","posWithinNode","from_length","finalNodeEdit","nodeName2","pred","succ","_i7","_i8","from","mergeOffset","mergeOrigin","mergeableWithPred","_i9","mergeableWithSucc","mismatch","_i10","donor","_i11","_i12","predecessorIndex","successorIndex","trackIdx","drawInsertion","x2","drawDeletion","_x","drawSubstitution","nodeY","insertionMouseOver","insertionMouseOut","x1","substitutionMouseOver","substitutionMouseOut","deletionMouseOver","deletionMouseOut","defineProperty","jsonC","constructor","isJSON","json","json1","json2","isArray"],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\nvar _mergeJson = require('merge-json');\nvar mergeJSON = _interopRequireWildcard(_mergeJson);\nvar _tubemap = require('./tubemap');\nvar tubeMap = _interopRequireWildcard(_tubemap);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for (var key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key))\n                    newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nvar CONFIG = require('../../config.default.json');\ntry {\n    CONFIG = mergeJSON.merge(CONFIG, require('../../config.json'));\n} catch (err) {\n}\nvar BACKEND_URL = CONFIG.BACKEND_URL || 'http://' + window.location.host;\nvar DATA_SOURCES = CONFIG.DATA_SOURCES;\n$('#dataSourceSelect').change(function () {\n    $('#distance').prop('value', '100');\n    $('#unitSelect').prop('value', '1');\n    if ($('#dataSourceSelect').val() === 'custom') {\n        $('#reloadButton').prop('disabled', false);\n        $('#xgFileSelect').prop('disabled', false);\n        $('#gbwtFileSelect').prop('disabled', false);\n        $('#gamIndexSelect').prop('disabled', false);\n        $('#pathNameSelect').prop('disabled', false);\n        $('#position').prop('value', '1');\n    } else {\n        $('#reloadButton').prop('disabled', true);\n        $('#xgFileSelect').prop('disabled', true);\n        $('#gbwtFileSelect').prop('disabled', true);\n        $('#gamIndexSelect').prop('disabled', true);\n        $('#pathNameSelect').prop('disabled', true);\n        DATA_SOURCES.forEach(function (ds) {\n            if (ds.name === $('#dataSourceSelect').val()) {\n                $('#position').prop('value', ds.defaultPosition);\n            }\n        });\n    }\n});\n$('#xgFileSelect').change(function () {\n    $('#pathNameSelect').empty();\n    if ($('#xgFileSelect').val() === 'none') {\n        var opt = document.createElement('option');\n        opt.value = 'none';\n        opt.innerHTML = 'None';\n        $('#pathNameSelect').append(opt);\n    } else {\n        getPathNames();\n    }\n});\nfunction getPathNames() {\n    var xgFile = $('#xgFileSelect').val();\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getPathNames',\n        crossDomain: true,\n        data: { xgFile: xgFile },\n        dataType: 'json',\n        success: function success(response) {\n            var pathNameSelect = document.getElementById('pathNameSelect');\n            var optNone = document.createElement('option');\n            optNone.value = 'none';\n            optNone.innerHTML = 'None';\n            $('#pathNameSelect').append(optNone);\n            response.pathNames.forEach(function (fn) {\n                var opt = document.createElement('option');\n                $('#pathNameSelect').append('<option value=\"' + fn + '\" selected>' + fn + '</option>');\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\ndocument.getElementById('reloadButton').onclick = function () {\n    populateDropdownsWithFilenames();\n};\ndocument.getElementById('goButton').onclick = function () {\n    prepareForTubeMap();\n};\ndocument.getElementById('goLeftButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = Math.max(position - distance, 0);\n    prepareForTubeMap();\n};\ndocument.getElementById('goRightButton').onclick = function () {\n    var position = Number(document.getElementById('position').value);\n    var distance = Number(document.getElementById('distance').value);\n    document.getElementById('position').value = position + distance;\n    prepareForTubeMap();\n};\nfunction prepareForTubeMap() {\n    d3.select('#svg').selectAll('*').remove();\n    d3.select('#svg').attr('width', 100);\n    var w = $('.tubeMapSVG').width();\n    $('#legendDiv').html('');\n    document.getElementById('loader').setAttribute('style', 'left:' + (w / 2 - 25) + 'px');\n    getRemoteTubeMapData();\n}\nfunction getRemoteTubeMapData() {\n    var nodeID = document.getElementById('position').value;\n    var distance = document.getElementById('distance').value;\n    var byNode = document.getElementById('unitSelect').selectedIndex !== 0;\n    var xgFile = $('#xgFileSelect').val();\n    var gbwtFile = $('#gbwtFileSelect').val();\n    var gamIndex = $('#gamIndexSelect').val();\n    var anchorTrackName = $('#pathNameSelect').val();\n    var useMountedPath = true;\n    DATA_SOURCES.forEach(function (ds) {\n        if (ds.name === $('#dataSourceSelect').val()) {\n            console.log('found');\n            xgFile = ds.xgFile;\n            gbwtFile = ds.gbwtFile;\n            gamIndex = ds.gamIndex;\n            anchorTrackName = ds.anchorTrackName;\n            useMountedPath = ds.useMountedPath;\n        }\n    });\n    console.log('useMountedPath = ' + useMountedPath);\n    console.log('anchorTrackName = ' + anchorTrackName);\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/chr22_v4',\n        crossDomain: true,\n        data: {\n            nodeID: nodeID,\n            distance: distance,\n            byNode: byNode,\n            xgFile: xgFile,\n            gbwtFile: gbwtFile,\n            gamIndex: gamIndex,\n            anchorTrackName: anchorTrackName,\n            useMountedPath: useMountedPath\n        },\n        dataType: 'json',\n        success: function success(response) {\n            if (response.graph === undefined) {\n                document.getElementById('inputError').innerText = response.error;\n                document.getElementById('loader').style.display = 'none';\n            } else {\n                document.getElementById('inputError').innerText = '';\n                var nodes = tubeMap.vgExtractNodes(response.graph);\n                var tracks = tubeMap.vgExtractTracks(response.graph);\n                var reads = tubeMap.vgExtractReads(nodes, tracks, response.gam);\n                createTubeMap(nodes, tracks, reads);\n            }\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction createTubeMap(nodes, tracks, reads) {\n    tubeMap.create({\n        svgID: '#svg',\n        nodes: nodes,\n        tracks: tracks,\n        reads: reads\n    });\n    document.getElementById('loader').style.display = 'none';\n}\ndocument.getElementById('redundantNodesCheckbox').onclick = function () {\n    if (document.getElementById('redundantNodesCheckbox').checked === true)\n        tubeMap.setMergeNodesFlag(true);\n    else\n        tubeMap.setMergeNodesFlag(false);\n};\ndocument.getElementById('compressedViewCheckbox').onclick = function () {\n    if (document.getElementById('compressedViewCheckbox').checked === true)\n        tubeMap.setNodeWidthOption(1);\n    else\n        tubeMap.setNodeWidthOption(0);\n};\ndocument.getElementById('showReadsCheckbox').onclick = function () {\n    if (document.getElementById('showReadsCheckbox').checked === true)\n        tubeMap.setShowReadsFlag(true);\n    else\n        tubeMap.setShowReadsFlag(false);\n};\ndocument.getElementById('softClipsCheckbox').onclick = function () {\n    if (document.getElementById('softClipsCheckbox').checked === true)\n        tubeMap.setSoftClipsFlag(true);\n    else\n        tubeMap.setSoftClipsFlag(false);\n};\nvar radios = document.getElementsByClassName('colorRadio');\nvar _loop = function _loop(i) {\n    var trackType = void 0;\n    switch (radios[i].name) {\n    case 'colorsHaplo':\n        trackType = 'haplotypeColors';\n        break;\n    case 'colorsFwReads':\n        trackType = 'forwardReadColors';\n        break;\n    case 'colorsRevReads':\n        trackType = 'reverseReadColors';\n        break;\n    default:\n        console.log('Could not find track type in color set assignment');\n    }\n    var colorSet = void 0;\n    switch (radios[i].value) {\n    case 'option1':\n        colorSet = 'plainColors';\n        break;\n    case 'option2':\n        colorSet = 'greys';\n        break;\n    case 'option3':\n        colorSet = 'reds';\n        break;\n    case 'option4':\n        colorSet = 'blues';\n        break;\n    case 'option5':\n        colorSet = 'lightColors';\n        break;\n    default:\n        console.log('Could not find color type in color set assignment');\n    }\n    radios[i].onclick = function () {\n        console.log(this);\n        tubeMap.setColorSet(trackType, colorSet);\n    };\n};\nfor (var i = 0; i < radios.length; i += 1) {\n    _loop(i);\n}\ndocument.getElementById('downloadButton').onclick = function () {\n    var svgN = document.getElementById('svg');\n    var svgData = new XMLSerializer().serializeToString(svgN);\n    var svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    var svgUrl = URL.createObjectURL(svgBlob);\n    var downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = 'graph.svg';\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n};\nfunction clearDropdownsWithFilenames() {\n    var xgSelect = document.getElementById('xgFileSelect');\n    while (xgSelect.hasChildNodes()) {\n        xgSelect.removeChild(xgSelect.lastChild);\n    }\n    var opt1 = document.createElement('option');\n    opt1.value = 'none';\n    opt1.innerHTML = 'None';\n    xgSelect.appendChild(opt1);\n    var gbwtSelect = document.getElementById('gbwtFileSelect');\n    while (gbwtSelect.hasChildNodes()) {\n        gbwtSelect.removeChild(gbwtSelect.lastChild);\n    }\n    var opt2 = document.createElement('option');\n    opt2.value = 'none';\n    opt2.innerHTML = 'None';\n    gbwtSelect.appendChild(opt2);\n    var gamIndexSelect = document.getElementById('gamIndexSelect');\n    while (gamIndexSelect.hasChildNodes()) {\n        gamIndexSelect.removeChild(gamIndexSelect.lastChild);\n    }\n    var opt3 = document.createElement('option');\n    opt3.value = 'none';\n    opt3.innerHTML = 'None';\n    gamIndexSelect.appendChild(opt3);\n}\nfunction populateDropdownsWithFilenames() {\n    $.ajax({\n        type: 'POST',\n        url: BACKEND_URL + '/getFilenames',\n        crossDomain: true,\n        success: function success(response) {\n            var xgSelect = document.getElementById('xgFileSelect');\n            var xgSelectValue = xgSelect.options[xgSelect.selectedIndex].value;\n            var gbwtSelect = document.getElementById('gbwtFileSelect');\n            var gbwtSelectValue = gbwtSelect.options[gbwtSelect.selectedIndex].value;\n            var gamIndexSelect = document.getElementById('gamIndexSelect');\n            var gamSelectValue = gamIndexSelect.options[gamIndexSelect.selectedIndex].value;\n            clearDropdownsWithFilenames();\n            response.xgFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === xgSelectValue) {\n                    opt.selected = 'true';\n                }\n                xgSelect.appendChild(opt);\n            });\n            response.gbwtFiles.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gbwtSelectValue) {\n                    opt.selected = 'true';\n                }\n                gbwtSelect.appendChild(opt);\n            });\n            response.gamIndices.forEach(function (filename) {\n                var opt = document.createElement('option');\n                opt.value = filename;\n                opt.innerHTML = filename;\n                if (opt.value === gamSelectValue) {\n                    opt.selected = 'true';\n                }\n                gamIndexSelect.appendChild(opt);\n            });\n        },\n        error: function error(responseData, textStatus, errorThrown) {\n            console.log('POST failed.');\n        }\n    });\n}\nfunction setUpWebsocket() {\n    var ws = new WebSocket(BACKEND_URL.replace(/^http/, 'ws'));\n    ws.onmessage = function (message) {\n        console.log('Message received');\n        populateDropdownsWithFilenames();\n    };\n    ws.onclose = function (event) {\n        setTimeout(setUpWebsocket, 1000);\n    };\n    ws.onerror = function (event) {\n        ws.close();\n    };\n}\nwindow.onload = function () {\n    var dsSelect = document.getElementById('dataSourceSelect');\n    DATA_SOURCES.forEach(function (ds) {\n        var opt = document.createElement('option');\n        opt.value = ds.name;\n        opt.innerHTML = ds.name;\n        dsSelect.appendChild(opt);\n    });\n    var opt = document.createElement('option');\n    opt.value = 'custom';\n    opt.innerHTML = 'custom';\n    dsSelect.appendChild(opt);\n    document.getElementById('goButton').click();\n    populateDropdownsWithFilenames();\n    document.getElementById('redundantNodesCheckbox').checked = true;\n    document.getElementById('compressedViewCheckbox').checked = false;\n    document.getElementById('showReadsCheckbox').checked = true;\n    document.getElementById('softClipsCheckbox').checked = true;\n    document.getElementById('colorsHaplo2').checked = true;\n    document.getElementById('colorsFwReads3').checked = true;\n    document.getElementById('colorsRevReads4').checked = true;\n    setUpWebsocket();\n};","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nexports.create = create;\nexports.changeTrackVisibility = changeTrackVisibility;\nexports.changeExonVisibility = changeExonVisibility;\nexports.setMergeNodesFlag = setMergeNodesFlag;\nexports.setSoftClipsFlag = setSoftClipsFlag;\nexports.setShowReadsFlag = setShowReadsFlag;\nexports.setColorSet = setColorSet;\nexports.setNodeWidthOption = setNodeWidthOption;\nexports.useColorScheme = useColorScheme;\nexports.vgExtractNodes = vgExtractNodes;\nexports.vgExtractTracks = vgExtractTracks;\nexports.vgExtractReads = vgExtractReads;\nvar DEBUG = false;\nvar greys = [\n        '#d9d9d9',\n        '#bdbdbd',\n        '#969696',\n        '#737373',\n        '#525252',\n        '#252525',\n        '#000000'\n    ];\nvar blues = [\n        '#c6dbef',\n        '#9ecae1',\n        '#6baed6',\n        '#4292c6',\n        '#2171b5',\n        '#08519c',\n        '#08306b'\n    ];\nvar reds = [\n        '#fcbba1',\n        '#fc9272',\n        '#fb6a4a',\n        '#ef3b2c',\n        '#cb181d',\n        '#a50f15',\n        '#67000d'\n    ];\nvar plainColors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ];\nvar lightColors = [\n        '#ABCCE3',\n        '#FFCFA5',\n        '#B0DBB0',\n        '#F0AEAE',\n        '#D7C6E6',\n        '#C6ABA5',\n        '#F4CCE8',\n        '#CFCFCF',\n        '#E6E6AC',\n        '#A8E7ED'\n    ];\nvar haplotypeColors = [];\nvar forwardReadColors = [];\nvar reverseReadColors = [];\nvar exonColors = [];\nvar svgID = void 0;\nvar svg = void 0;\nvar inputNodes = [];\nvar inputTracks = [];\nvar inputReads = [];\nvar nodes = void 0;\nvar tracks = void 0;\nvar reads = void 0;\nvar numberOfNodes = void 0;\nvar numberOfTracks = void 0;\nvar nodeMap = void 0;\nvar nodesPerOrder = void 0;\nvar assignments = [];\nvar extraLeft = [];\nvar extraRight = [];\nvar maxOrder = void 0;\nvar config = {\n        mergeNodesFlag: true,\n        clickableNodesFlag: false,\n        showExonsFlag: false,\n        colorScheme: 0,\n        nodeWidthOption: 0,\n        showReads: true,\n        showSoftClips: true,\n        haplotypeColors: 'greys',\n        forwardReadColors: 'reds',\n        reverseReadColors: 'blues',\n        exonColors: 'lightColors',\n        hideLegendFlag: false\n    };\nvar trackRectangles = [];\nvar trackCurves = [];\nvar trackCorners = [];\nvar trackVerticalRectangles = [];\nvar trackRectanglesStep3 = [];\nvar maxYCoordinate = 0;\nvar minYCoordinate = 0;\nvar maxXCoordinate = 0;\nvar trackForRuler = void 0;\nvar bed = void 0;\nfunction create(params) {\n    svgID = params.svgID;\n    svg = d3.select(params.svgID);\n    inputNodes = JSON.parse(JSON.stringify(params.nodes));\n    inputTracks = JSON.parse(JSON.stringify(params.tracks));\n    inputReads = params.reads || null;\n    bed = params.bed || null;\n    config.clickableNodesFlag = params.clickableNodes || false;\n    config.hideLegendFlag = params.hideLegend || false;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction moveTrackToFirstPosition(index) {\n    inputTracks.unshift(inputTracks[index]);\n    inputTracks.splice(index + 1, 1);\n    straightenTrack(0);\n}\nfunction straightenTrack(index) {\n    var i = void 0;\n    var j = void 0;\n    var nodesToInvert = [];\n    var currentSequence = void 0;\n    var nodeName = void 0;\n    currentSequence = inputTracks[index].sequence;\n    for (i = 0; i < currentSequence.length; i += 1) {\n        if (currentSequence[i].charAt(0) === '-') {\n            nodeName = currentSequence[i].substr(1);\n            if (currentSequence.indexOf(nodeName) === -1 || currentSequence.indexOf(nodeName) > i) {\n                nodesToInvert.push(currentSequence[i].substr(1));\n            }\n        }\n    }\n    for (i = 0; i < inputTracks.length; i += 1) {\n        currentSequence = inputTracks[i].sequence;\n        for (j = 0; j < currentSequence.length; j += 1) {\n            if (currentSequence[j].charAt(0) !== '-') {\n                if (nodesToInvert.indexOf(currentSequence[j]) !== -1) {\n                    currentSequence[j] = '-' + currentSequence[j];\n                }\n            } else if (nodesToInvert.indexOf(currentSequence[j].substr(1)) !== -1) {\n                currentSequence[j] = currentSequence[j].substr(1);\n            }\n        }\n    }\n    inputNodes.forEach(function (node) {\n        if (nodesToInvert.indexOf(node.name) !== -1) {\n            node.seq = node.seq.split('').reverse().join('');\n        }\n    });\n}\nfunction changeTrackVisibility(trackID) {\n    var i = 0;\n    while (i < inputTracks.length && inputTracks[i].id !== trackID) {\n        i += 1;\n    }\n    if (i < inputTracks.length) {\n        if (inputTracks[i].hasOwnProperty('hidden')) {\n            inputTracks[i].hidden = !inputTracks[i].hidden;\n        } else {\n            inputTracks[i].hidden = true;\n        }\n    }\n    createTubeMap();\n}\nfunction changeExonVisibility() {\n    config.showExonsFlag = !config.showExonsFlag;\n    createTubeMap();\n}\nfunction setMergeNodesFlag(value) {\n    if (config.mergeNodesFlag !== value) {\n        config.mergeNodesFlag = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setSoftClipsFlag(value) {\n    if (config.showSoftClips !== value) {\n        config.showSoftClips = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setShowReadsFlag(value) {\n    if (config.showReads !== value) {\n        config.showReads = value;\n        svg = d3.select(svgID);\n        createTubeMap();\n    }\n}\nfunction setColorSet(trackType, colorSet) {\n    config[trackType] = colorSet;\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction setNodeWidthOption(value) {\n    if (value === 0 || value === 1 || value === 2) {\n        if (config.nodeWidthOption !== value) {\n            config.nodeWidthOption = value;\n            if (svg !== undefined) {\n                svg = d3.select(svgID);\n                createTubeMap();\n            }\n        }\n    }\n}\nfunction createTubeMap() {\n    trackRectangles = [];\n    trackCurves = [];\n    trackCorners = [];\n    trackVerticalRectangles = [];\n    trackRectanglesStep3 = [];\n    assignments = [];\n    extraLeft = [];\n    extraRight = [];\n    maxYCoordinate = 0;\n    minYCoordinate = 0;\n    maxXCoordinate = 0;\n    trackForRuler = undefined;\n    svg = d3.select(svgID);\n    svg.selectAll('*').remove();\n    nodes = JSON.parse(JSON.stringify(inputNodes));\n    tracks = JSON.parse(JSON.stringify(inputTracks));\n    reads = JSON.parse(JSON.stringify(inputReads));\n    assignColorSets();\n    for (var i = tracks.length - 1; i >= 0; i -= 1) {\n        if (!tracks[i].hasOwnProperty('type')) {\n            tracks[i].type = 'haplo';\n        }\n        if (tracks[i].hasOwnProperty('hidden')) {\n            if (tracks[i].hidden === true) {\n                tracks.splice(i, 1);\n            }\n        }\n        if (tracks[i].hasOwnProperty('indexOfFirstBase')) {\n            trackForRuler = tracks[i].name;\n        }\n    }\n    nodeMap = generateNodeMap(nodes);\n    generateTrackIndexSequences(tracks);\n    if (reads && config.showReads)\n        generateTrackIndexSequences(reads);\n    generateNodeWidth();\n    if (reads && config.mergeNodesFlag) {\n        generateNodeSuccessors();\n        generateNodeOrder();\n        if (reads && config.showReads)\n            reverseReversedReads();\n        mergeNodes();\n        nodeMap = generateNodeMap(nodes);\n        generateNodeWidth();\n        generateTrackIndexSequences(tracks);\n        if (reads && config.showReads)\n            generateTrackIndexSequences(reads);\n    }\n    numberOfNodes = nodes.length;\n    numberOfTracks = tracks.length;\n    generateNodeSuccessors();\n    generateNodeDegree();\n    if (DEBUG)\n        console.log(numberOfNodes + ' nodes.');\n    generateNodeOrder();\n    maxOrder = getMaxOrder();\n    calculateTrackWidth(tracks);\n    generateLaneAssignment();\n    if (config.showExonsFlag === true && bed !== null)\n        addTrackFeatures();\n    generateNodeXCoords();\n    if (reads && config.showReads) {\n        generateReadOnlyNodeAttributes();\n        reverseReversedReads();\n        generateTrackIndexSequences(reads);\n        placeReads();\n        tracks = tracks.concat(reads);\n    }\n    generateSVGShapesFromPath(nodes, tracks);\n    console.log('Tracks:');\n    console.log(tracks);\n    console.log('Nodes:');\n    console.log(nodes);\n    console.log('Lane assignment:');\n    console.log(assignments);\n    getImageDimensions();\n    alignSVG(nodes, tracks);\n    defineSVGPatterns();\n    drawTrackRectangles(trackRectangles);\n    drawTrackCurves();\n    drawReversalsByColor(trackCorners, trackVerticalRectangles);\n    drawTrackRectangles(trackRectanglesStep3);\n    drawTrackRectangles(trackRectangles, 'read');\n    drawTrackCurves('read');\n    var dNodes = removeUnusedNodes(nodes);\n    drawNodes(dNodes);\n    drawReversalsByColor(trackCorners, trackVerticalRectangles, 'read');\n    if (config.nodeWidthOption === 0)\n        drawLabels(dNodes);\n    if (trackForRuler !== undefined)\n        drawRuler();\n    if (config.nodeWidthOption === 0)\n        drawMismatches();\n    if (DEBUG) {\n        console.log('number of tracks: ' + numberOfTracks);\n        console.log('number of nodes: ' + numberOfNodes);\n    }\n    return tracks;\n}\nfunction generateReadOnlyNodeAttributes() {\n    nodesPerOrder = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        nodesPerOrder[i] = [];\n    }\n    var orderY = new Map();\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.hasOwnProperty('y')) {\n            if (orderY.has(node.order)) {\n                orderY.set(node.order, Math.max(node.y + node.contentHeight, orderY.get(node.order)));\n            } else {\n                orderY.set(node.order, node.y + node.contentHeight);\n            }\n        }\n    });\n    nodes.forEach(function (node, i) {\n        if (node.hasOwnProperty('order') && !node.hasOwnProperty('y')) {\n            console.log('adding to ' + node.name);\n            node.y = orderY.get(node.order) + 25;\n            node.contentHeight = 0;\n            nodesPerOrder[node.order].push(i);\n        }\n    });\n}\nfunction assignReadsToNodes() {\n    nodes.forEach(function (node) {\n        node.incomingReads = [];\n        node.outgoingReads = [];\n        node.internalReads = [];\n    });\n    reads.forEach(function (read, idx) {\n        read.width = 7;\n        if (read.path.length === 1) {\n            nodes[read.path[0].node].internalReads.push(idx);\n        } else {\n            read.path.forEach(function (element, pathIdx) {\n                if (pathIdx === 0) {\n                    nodes[read.path[0].node].outgoingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                } else if (read.path[pathIdx].node !== null) {\n                    nodes[read.path[pathIdx].node].incomingReads.push([\n                        idx,\n                        pathIdx\n                    ]);\n                }\n            });\n        }\n    });\n}\nfunction removeNonPathNodesFromReads() {\n    reads.forEach(function (read) {\n        for (var i = read.sequence.length - 1; i >= 0; i -= 1) {\n            var nodeName = read.sequence[i];\n            if (nodeName.charAt(0) === '-') {\n                nodeName = nodeName.substr(1);\n            }\n            if (!nodeMap.has(nodeName) || nodes[nodeMap.get(nodeName)].degree === 0) {\n                read.sequence.splice(i, 1);\n            }\n        }\n    });\n}\nfunction placeReads() {\n    generateBasicPathsForReads();\n    assignReadsToNodes();\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    sortedNodes.forEach(function (node) {\n        node.incomingReads.sort(compareReadIncomingSegmentsByComingFrom);\n        var currentY = node.y + node.contentHeight;\n        var occupiedUntil = new Map();\n        node.incomingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            setOccupiedUntil(occupiedUntil, reads[readElement[0]], readElement[1], currentY, node);\n            currentY += 7;\n        });\n        var maxY = currentY;\n        node.outgoingReads.sort(compareReadOutgoingSegmentsByGoingTo);\n        var occupiedFrom = new Map();\n        currentY = node.y + node.contentHeight;\n        node.outgoingReads.forEach(function (readElement) {\n            reads[readElement[0]].path[readElement[1]].y = currentY;\n            occupiedFrom.set(currentY, reads[readElement[0]].firstNodeOffset);\n            if (!occupiedUntil.has(currentY) || occupiedUntil.get(currentY) + 1 < reads[readElement[0]].firstNodeOffset) {\n                currentY += 7;\n                maxY = Math.max(maxY, currentY);\n            } else {\n                occupiedUntil.set(currentY, 0);\n                node.incomingReads.forEach(function (incReadElementIndices) {\n                    var incRead = reads[incReadElementIndices[0]];\n                    var incReadPathElement = incRead.path[incReadElementIndices[1]];\n                    if (incReadPathElement.y >= currentY) {\n                        incReadPathElement.y += 7;\n                        setOccupiedUntil(occupiedUntil, incRead, incReadElementIndices[1], incReadPathElement.y, node);\n                    }\n                });\n                currentY += 7;\n                maxY += 7;\n            }\n        });\n        node.internalReads.sort(compareInternalReads);\n        node.internalReads.forEach(function (readIdx) {\n            var currentRead = reads[readIdx];\n            currentY = node.y + node.contentHeight;\n            while (currentRead.firstNodeOffset < occupiedUntil.get(currentY) + 2 || currentRead.finalNodeCoverLength > occupiedFrom.get(currentY) - 3) {\n                currentY += 7;\n            }\n            currentRead.path[0].y = currentY;\n            occupiedUntil.set(currentY, currentRead.finalNodeCoverLength);\n            maxY = Math.max(maxY, currentY);\n        });\n        var heightIncrease = maxY - node.y - node.contentHeight;\n        node.contentHeight += heightIncrease;\n        adjustVertically3(node, heightIncrease);\n    });\n    var bottomY = calculateBottomY();\n    var elementsWithoutNode = [];\n    reads.forEach(function (read, idx) {\n        read.path.forEach(function (element, pathIdx) {\n            if (!element.hasOwnProperty('y')) {\n                elementsWithoutNode.push({\n                    readIndex: idx,\n                    pathIndex: pathIdx,\n                    previousY: reads[idx].path[pathIdx - 1].y\n                });\n            }\n        });\n    });\n    elementsWithoutNode.sort(compareNoNodeReadsByPreviousY);\n    elementsWithoutNode.forEach(function (element) {\n        var segment = reads[element.readIndex].path[element.pathIndex];\n        segment.y = bottomY[segment.order];\n        bottomY[segment.order] += reads[element.readIndex].width;\n    });\n    console.log('Reads:');\n    console.log(reads);\n}\nfunction setOccupiedUntil(map, read, pathIndex, y, node) {\n    if (pathIndex === read.path.length - 1) {\n        map.set(y, read.finalNodeCoverLength);\n    } else {\n        map.set(y, node.sequenceLength);\n    }\n}\nfunction compareNoNodeReadsByPreviousY(a, b) {\n    var segmentA = reads[a.readIndex].path[a.pathIndex];\n    var segmentB = reads[b.readIndex].path[b.pathIndex];\n    if (segmentA.order === segmentB.order) {\n        return a.previousY - b.previousY;\n    }\n    return segmentA.order - segmentB.order;\n}\nfunction compareReadOutgoingSegmentsByGoingTo(a, b) {\n    var pathIndexA = a[1];\n    var pathIndexB = b[1];\n    var nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n    var nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n    while (nodeA !== null && nodeB !== null && nodeA === nodeB) {\n        if (pathIndexA < reads[a[0]].path.length - 1) {\n            pathIndexA += 1;\n            while (reads[a[0]].path[pathIndexA].node === null) {\n                pathIndexA += 1;\n            }\n            nodeA = nodes[reads[a[0]].path[pathIndexA].node];\n        } else {\n            nodeA = null;\n        }\n        if (pathIndexB < reads[b[0]].path.length - 1) {\n            pathIndexB += 1;\n            while (reads[b[0]].path[pathIndexB].node === null) {\n                pathIndexB += 1;\n            }\n            nodeB = nodes[reads[b[0]].path[pathIndexB].node];\n        } else {\n            nodeB = null;\n        }\n    }\n    if (nodeA !== null) {\n        if (nodeB !== null)\n            return compareNodesByOrder(nodeA, nodeB);\n        return 1;\n    }\n    if (nodeB !== null)\n        return -1;\n    var beginDiff = reads[a[0]].firstNodeOffset - reads[b[0]].firstNodeOffset;\n    if (beginDiff !== 0)\n        return beginDiff;\n    return reads[a[0]].finalNodeCoverLength - reads[b[0]].finalNodeCoverLength;\n}\nfunction compareReadIncomingSegmentsByComingFrom(a, b) {\n    var pathA = reads[a[0]].path[a[1] - 1];\n    var pathB = reads[b[0]].path[b[1] - 1];\n    if (pathA.hasOwnProperty('y')) {\n        if (pathB.hasOwnProperty('y')) {\n            return pathA.y - pathB.y;\n        }\n        return -1;\n    }\n    if (pathB.hasOwnProperty('y')) {\n        return 1;\n    }\n    return compareReadIncomingSegmentsByComingFrom([\n        a[0],\n        a[1] - 1\n    ], [\n        b[0],\n        b[1] - 1\n    ]);\n}\nfunction compareInternalReads(idxA, idxB) {\n    var a = reads[idxA];\n    var b = reads[idxB];\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction calculateBottomY() {\n    var bottomY = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        bottomY.push(0);\n    }\n    nodes.forEach(function (node) {\n        bottomY[node.order] = Math.max(bottomY[node.order], node.y + node.contentHeight + 20);\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (element) {\n            bottomY[element.order] = Math.max(bottomY[element.order], element.y + track.width);\n        });\n    });\n    return bottomY;\n}\nfunction generateBasicPathsForReads() {\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    reads.forEach(function (read) {\n        currentNodeIndex = Math.abs(read.indexSequence[0]);\n        currentNodeIsForward = isPositive(read.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        read.path = [];\n        read.path.push({\n            order: currentNode.order,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        for (var i = 1; i < read.sequence.length; i += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(read.indexSequence[i]);\n            currentNodeIsForward = isPositive(read.indexSequence[i]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                for (var j = previousNode.order + 1; j < currentNode.order; j += 1) {\n                    read.path.push({\n                        order: j,\n                        isForward: true,\n                        node: null\n                    });\n                }\n                if (!currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    read.path.push({\n                        order: previousNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                for (var _j = previousNode.order - 1; _j > currentNode.order; _j -= 1) {\n                    read.path.push({\n                        order: _j,\n                        isForward: false,\n                        node: null\n                    });\n                }\n                if (currentNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                } else {\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    read.path.push({\n                        order: currentNode.order,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                }\n            }\n        }\n    });\n}\nfunction reverseReversedReads() {\n    reads.forEach(function (read) {\n        var pos = 0;\n        while (pos < read.sequence.length && read.sequence[pos].charAt(0) === '-') {\n            pos += 1;\n        }\n        if (pos === read.sequence.length) {\n            read.is_reverse = true;\n            read.sequence = read.sequence.reverse();\n            for (var i = 0; i < read.sequence.length; i += 1) {\n                read.sequence[i] = read.sequence[i].substr(1);\n            }\n            read.sequenceNew = read.sequenceNew.reverse();\n            var _loop = function _loop(_i) {\n                read.sequenceNew[_i].nodeName = read.sequenceNew[_i].nodeName.substr(1);\n                var nodeWidth = nodes[nodeMap.get(read.sequenceNew[_i].nodeName)].width;\n                read.sequenceNew[_i].mismatches.forEach(function (mm) {\n                    if (mm.type === 'insertion') {\n                        mm.pos = nodeWidth - mm.pos;\n                        mm.seq = getReverseComplement(mm.seq);\n                    } else if (mm.type === 'deletion') {\n                        mm.pos = nodeWidth - mm.pos - mm.length;\n                    } else if (mm.type === 'substitution') {\n                        mm.pos = nodeWidth - mm.pos - mm.seq.length;\n                        mm.seq = getReverseComplement(mm.seq);\n                    }\n                    if (mm.hasOwnProperty('seq')) {\n                        mm.seq = mm.seq.split('').reverse().join('');\n                    }\n                });\n            };\n            for (var _i = 0; _i < read.sequenceNew.length; _i += 1) {\n                _loop(_i);\n            }\n            var temp = read.firstNodeOffset;\n            var seqLength = nodes[nodeMap.get(read.sequence[0])].sequenceLength;\n            read.firstNodeOffset = seqLength - read.finalNodeCoverLength;\n            seqLength = nodes[nodeMap.get(read.sequence[read.sequence.length - 1])].sequenceLength;\n            read.finalNodeCoverLength = seqLength - temp;\n        }\n    });\n}\nfunction getReverseComplement(s) {\n    var result = '';\n    for (var i = s.length - 1; i >= 0; i -= 1) {\n        switch (s.charAt(i)) {\n        case 'A':\n            result += 'T';\n            break;\n        case 'T':\n            result += 'A';\n            break;\n        case 'C':\n            result += 'G';\n            break;\n        case 'G':\n            result += 'C';\n            break;\n        default:\n            result += 'N';\n        }\n    }\n    return result;\n}\nfunction generateTrackIndexSequencesNEW(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (edit) {\n            if (edit.nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(edit.nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(edit.nodeName));\n            }\n        });\n    });\n}\nfunction generateTrackIndexSequences(tracksOrReads) {\n    tracksOrReads.forEach(function (track) {\n        track.indexSequence = [];\n        track.sequence.forEach(function (nodeName) {\n            if (nodeName.charAt(0) === '-') {\n                track.indexSequence.push(-nodeMap.get(nodeName.substr(1)));\n            } else {\n                track.indexSequence.push(nodeMap.get(nodeName));\n            }\n        });\n    });\n}\nfunction removeUnusedNodes(allNodes) {\n    var dNodes = allNodes.slice(0);\n    var i = void 0;\n    for (i = dNodes.length - 1; i >= 0; i -= 1) {\n        if (!dNodes[i].hasOwnProperty('x')) {\n            dNodes.splice(i, 1);\n        }\n    }\n    return dNodes;\n}\nfunction getImageDimensions() {\n    maxXCoordinate = -99;\n    minYCoordinate = 99;\n    maxYCoordinate = -99;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('x')) {\n            maxXCoordinate = Math.max(maxXCoordinate, node.x + 20 + node.pixelWidth);\n        }\n        if (node.hasOwnProperty('y')) {\n            minYCoordinate = Math.min(minYCoordinate, node.y - 10);\n            maxYCoordinate = Math.max(maxYCoordinate, node.y + node.contentHeight + 10);\n        }\n    });\n    tracks.forEach(function (track) {\n        track.path.forEach(function (segment) {\n            maxYCoordinate = Math.max(maxYCoordinate, segment.y + track.width);\n            minYCoordinate = Math.min(minYCoordinate, segment.y);\n        });\n    });\n}\nfunction alignSVG() {\n    var zoom = d3.behavior.zoom().scaleExtent([\n            0.1,\n            5\n        ]).on('zoom', function () {\n            svg.attr('transform', 'translate(' + d3.event.translate + ') scale(' + d3.event.scale + ')');\n        });\n    svg = svg.call(zoom).on('dblclick.zoom', null).append('g');\n    zoom.translate([\n        0,\n        -minYCoordinate + 25\n    ]);\n    zoom.event(svg);\n    var svg2 = d3.select(svgID);\n    svg2.attr('height', maxYCoordinate - minYCoordinate + 50);\n    svg2.attr('width', Math.max(maxXCoordinate, $(svgID).parent().width()));\n}\nfunction generateNodeMap() {\n    nodeMap = new Map();\n    nodes.forEach(function (node, index) {\n        nodeMap.set(node.name, index);\n    });\n    return nodeMap;\n}\nfunction generateNodeSuccessors() {\n    var current = void 0;\n    var follower = void 0;\n    nodes.forEach(function (node) {\n        node.successors = [];\n        node.predecessors = [];\n    });\n    tracks.forEach(function (track) {\n        for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n            current = Math.abs(track.indexSequence[i]);\n            follower = Math.abs(track.indexSequence[i + 1]);\n            if (nodes[current].successors.indexOf(follower) === -1) {\n                nodes[current].successors.push(follower);\n            }\n            if (nodes[follower].predecessors.indexOf(current) === -1) {\n                nodes[follower].predecessors.push(current);\n            }\n        }\n    });\n    if (reads && config.showReads) {\n        reads.forEach(function (track) {\n            for (var i = 0; i < track.indexSequence.length - 1; i += 1) {\n                current = Math.abs(track.indexSequence[i]);\n                follower = Math.abs(track.indexSequence[i + 1]);\n                if (nodes[current].successors.indexOf(follower) === -1) {\n                    nodes[current].successors.push(follower);\n                }\n                if (nodes[follower].predecessors.indexOf(current) === -1) {\n                    nodes[follower].predecessors.push(current);\n                }\n            }\n        });\n    }\n}\nfunction generateNodeOrderOfSingleTrack(sequence) {\n    var forwardOrder = 0;\n    var backwardOrder = 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    sequence.forEach(function (nodeIndex) {\n        if (nodeIndex < 0) {\n            currentNode = nodes[Math.abs(nodeIndex)];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = backwardOrder;\n            }\n            if (currentNode.order < minOrder)\n                minOrder = currentNode.order;\n            forwardOrder = currentNode.order;\n            backwardOrder = currentNode.order - 1;\n        } else {\n            currentNode = nodes[nodeIndex];\n            if (!currentNode.hasOwnProperty('order')) {\n                currentNode.order = forwardOrder;\n            }\n            forwardOrder = currentNode.order + 1;\n            backwardOrder = currentNode.order;\n        }\n    });\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n}\nfunction generateNodeOrderTrackBeginning(sequence) {\n    var anchorIndex = 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var minOrder = 0;\n    var increment = void 0;\n    while (anchorIndex < sequence.length && !nodes[Math.abs(sequence[anchorIndex])].hasOwnProperty('order')) {\n        anchorIndex += 1;\n    }\n    if (anchorIndex >= sequence.length) {\n        return null;\n    }\n    if (sequence[anchorIndex] >= 0) {\n        currentOrder = nodes[sequence[anchorIndex]].order - 1;\n        increment = -1;\n    } else {\n        currentOrder = nodes[-sequence[anchorIndex]].order + 1;\n        increment = 1;\n    }\n    for (var j = anchorIndex - 1; j >= 0; j -= 1) {\n        currentNode = nodes[Math.abs(sequence[j])];\n        if (!currentNode.hasOwnProperty('order')) {\n            currentNode.order = currentOrder;\n            minOrder = Math.min(minOrder, currentOrder);\n            currentOrder += increment;\n        }\n    }\n    if (minOrder < 0) {\n        increaseOrderForAllNodes(-minOrder);\n    }\n    return anchorIndex;\n}\nfunction generateNodeOrder() {\n    var modifiedSequence = void 0;\n    var currentOrder = void 0;\n    var currentNode = void 0;\n    var rightIndex = void 0;\n    var leftIndex = void 0;\n    var minOrder = 0;\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    nodes.forEach(function (node) {\n        delete node.order;\n    });\n    generateNodeOrderOfSingleTrack(tracks[0].indexSequence);\n    for (var i = 1; i < tracksAndReads.length; i += 1) {\n        if (DEBUG)\n            console.log('generating order for track ' + (i + 1));\n        rightIndex = generateNodeOrderTrackBeginning(tracksAndReads[i].indexSequence);\n        if (rightIndex === null) {\n            tracksAndReads.splice(i, 1);\n            reads.splice(i - tracks.length, 1);\n            i -= 1;\n            continue;\n        }\n        modifiedSequence = uninvert(tracksAndReads[i].indexSequence);\n        while (rightIndex < modifiedSequence.length) {\n            leftIndex = rightIndex;\n            rightIndex += 1;\n            while (rightIndex < modifiedSequence.length && !nodes[modifiedSequence[rightIndex]].hasOwnProperty('order')) {\n                rightIndex += 1;\n            }\n            if (rightIndex < modifiedSequence.length) {\n                currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                for (var j = leftIndex + 1; j < rightIndex; j += 1) {\n                    nodes[modifiedSequence[j]].order = currentOrder;\n                    currentOrder += 1;\n                }\n                if (nodes[modifiedSequence[rightIndex]].order > nodes[modifiedSequence[leftIndex]].order) {\n                    if (nodes[modifiedSequence[rightIndex]].order < currentOrder) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    }\n                } else {\n                    if (tracksAndReads[i].indexSequence[rightIndex] >= 0 && !isSuccessor(modifiedSequence[rightIndex], modifiedSequence[leftIndex])) {\n                        increaseOrderForSuccessors(modifiedSequence[rightIndex], modifiedSequence[rightIndex - 1], currentOrder);\n                    } else {\n                        if (tracksAndReads[i].sequence[leftIndex] < 0 || nodes[modifiedSequence[leftIndex + 1]].degree < 2 && nodes[modifiedSequence[rightIndex]].order < nodes[modifiedSequence[leftIndex]].order) {\n                            currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                            for (var _j2 = leftIndex + 1; _j2 < rightIndex; _j2 += 1) {\n                                nodes[modifiedSequence[_j2]].order = currentOrder;\n                                currentOrder -= 1;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (tracksAndReads[i].sequence[leftIndex] >= 0) {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order + 1;\n                    for (var _j3 = leftIndex + 1; _j3 < modifiedSequence.length; _j3 += 1) {\n                        currentNode = nodes[modifiedSequence[_j3]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            currentOrder += 1;\n                        }\n                    }\n                } else {\n                    currentOrder = nodes[modifiedSequence[leftIndex]].order - 1;\n                    for (var _j4 = leftIndex + 1; _j4 < modifiedSequence.length; _j4 += 1) {\n                        currentNode = nodes[modifiedSequence[_j4]];\n                        if (!currentNode.hasOwnProperty('order')) {\n                            currentNode.order = currentOrder;\n                            minOrder = Math.min(minOrder, currentOrder);\n                            currentOrder -= 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (minOrder < 0)\n        increaseOrderForAllNodes(-minOrder);\n}\nfunction isSuccessor(first, second) {\n    var visited = new Array(numberOfNodes).fill(false);\n    var stack = [];\n    stack.push(first);\n    visited[first] = true;\n    while (stack.length > 0) {\n        var current = stack.pop();\n        if (current === second)\n            return true;\n        for (var i = 0; i < nodes[current].successors.length; i += 1) {\n            var childIndex = nodes[current].successors[i];\n            if (!visited[childIndex]) {\n                visited[childIndex] = true;\n                stack.push(childIndex);\n            }\n        }\n    }\n    return false;\n}\nfunction getMaxOrder() {\n    var max = -1;\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order') && node.order > max)\n            max = node.order;\n    });\n    return max;\n}\nfunction uninvert(sequence) {\n    var result = [];\n    for (var i = 0; i < sequence.length; i += 1) {\n        if (sequence[i] >= 0) {\n            result.push(sequence[i]);\n        } else {\n            result.push(-sequence[i]);\n        }\n    }\n    return result;\n}\nfunction increaseOrderForAllNodes(amount) {\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order'))\n            node.order += amount;\n    });\n}\nfunction increaseOrderForSuccessors(startingNode, tabuNode, newOrder) {\n    var increasedOrders = new Map();\n    var queue = [];\n    queue.push([\n        startingNode,\n        newOrder\n    ]);\n    var _loop2 = function _loop2() {\n        var current = queue.shift();\n        var currentNode = current[0];\n        var currentOrder = current[1];\n        if (nodes[currentNode].hasOwnProperty('order') && nodes[currentNode].order < currentOrder) {\n            if (!increasedOrders.has(currentNode) || increasedOrders.get(currentNode) < currentOrder) {\n                increasedOrders.set(currentNode, currentOrder);\n                nodes[currentNode].successors.forEach(function (successor) {\n                    if (nodes[successor].order > nodes[currentNode].order && successor !== tabuNode) {\n                        queue.push([\n                            successor,\n                            currentOrder + 1\n                        ]);\n                    }\n                });\n                if (currentNode !== startingNode) {\n                    nodes[currentNode].predecessors.forEach(function (predecessor) {\n                        if (nodes[predecessor].order > currentNode.order && predecessor !== tabuNode) {\n                            queue.push([\n                                predecessor,\n                                currentOrder + 1\n                            ]);\n                        }\n                    });\n                }\n            }\n        }\n    };\n    while (queue.length > 0) {\n        _loop2();\n    }\n    increasedOrders.forEach(function (value, key) {\n        nodes[key].order = value;\n    });\n}\nfunction generateNodeDegree() {\n    nodes.forEach(function (node) {\n        node.tracks = [];\n    });\n    tracks.forEach(function (track) {\n        track.indexSequence.forEach(function (nodeIndex) {\n            nodes[Math.abs(nodeIndex)].tracks.push(track.id);\n        });\n    });\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('tracks'))\n            node.degree = node.tracks.length;\n    });\n}\nfunction switchNodeOrientation() {\n    var toSwitch = new Map();\n    var nodeName = void 0;\n    var prevNode = void 0;\n    var nextNode = void 0;\n    var currentNode = void 0;\n    for (var i = 1; i < tracks.length; i += 1) {\n        for (var j = 0; j < tracks[i].sequence.length; j += 1) {\n            nodeName = tracks[i].sequence[j];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            currentNode = nodes[nodeMap.get(nodeName)];\n            if (tracks[0].sequence.indexOf(nodeName) === -1) {\n                if (j > 0) {\n                    if (tracks[i].sequence[j - 1].charAt(0) !== '-')\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1])];\n                    else\n                        prevNode = nodes[nodeMap.get(tracks[i].sequence[j - 1].substr(1))];\n                }\n                if (j < tracks[i].sequence.length - 1) {\n                    if (tracks[i].sequence[j + 1].charAt(0) !== '-')\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1])];\n                    else\n                        nextNode = nodes[nodeMap.get(tracks[i].sequence[j + 1].substr(1))];\n                }\n                if ((j === 0 || prevNode.order < currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order < nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                }\n                if ((j === 0 || prevNode.order > currentNode.order) && (j === tracks[i].sequence.length - 1 || currentNode.order > nextNode.order)) {\n                    if (!toSwitch.has(nodeName))\n                        toSwitch.set(nodeName, 0);\n                    if (tracks[i].sequence[j].charAt(0) === '-')\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) - 1);\n                    else\n                        toSwitch.set(nodeName, toSwitch.get(nodeName) + 1);\n                }\n            }\n        }\n    }\n    tracks.forEach(function (track, trackIndex) {\n        track.sequence.forEach(function (node, nodeIndex) {\n            nodeName = node;\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            if (toSwitch.has(nodeName) && toSwitch.get(nodeName) > 0) {\n                if (node.charAt(0) === '-')\n                    tracks[trackIndex].sequence[nodeIndex] = node.substr(1);\n                else\n                    tracks[trackIndex].sequence[nodeIndex] = '-' + node;\n            }\n        });\n    });\n    toSwitch.forEach(function (value, key) {\n        if (value > 0) {\n            currentNode = nodeMap.get(key);\n            nodes[currentNode].seq = nodes[currentNode].seq.split('').reverse().join('');\n        }\n    });\n}\nfunction generateNodeXCoords() {\n    var currentX = 0;\n    var nextX = 20;\n    var currentOrder = -1;\n    var sortedNodes = nodes.slice();\n    sortedNodes.sort(compareNodesByOrder);\n    var extra = calculateExtraSpace();\n    sortedNodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            if (node.order > currentOrder) {\n                currentOrder = node.order;\n                currentX = nextX + 10 * extra[node.order];\n            }\n            node.x = currentX;\n            nextX = Math.max(nextX, currentX + 40 + node.pixelWidth);\n        }\n    });\n}\nfunction calculateExtraSpace() {\n    var leftSideEdges = [];\n    var rightSideEdges = [];\n    var extra = [];\n    for (var i = 0; i <= maxOrder; i += 1) {\n        leftSideEdges.push(0);\n        rightSideEdges.push(0);\n    }\n    tracks.forEach(function (track) {\n        for (var _i2 = 1; _i2 < track.path.length; _i2 += 1) {\n            if (track.path[_i2].order === track.path[_i2 - 1].order) {\n                if (track.path[_i2].isForward === true)\n                    leftSideEdges[track.path[_i2].order] += 1;\n                else\n                    rightSideEdges[track.path[_i2].order] += 1;\n            }\n        }\n    });\n    extra.push(Math.max(0, leftSideEdges[0] - 1));\n    for (var _i3 = 1; _i3 <= maxOrder; _i3 += 1) {\n        extra.push(Math.max(0, leftSideEdges[_i3] - 1) + Math.max(0, rightSideEdges[_i3 - 1] - 1));\n    }\n    return extra;\n}\nfunction generateLaneAssignment() {\n    var segmentNumber = void 0;\n    var currentNodeIndex = void 0;\n    var currentNodeIsForward = void 0;\n    var currentNode = void 0;\n    var previousNode = void 0;\n    var previousNodeIsForward = void 0;\n    var prevSegmentPerOrderPerTrack = [];\n    var isPositive = function isPositive(n) {\n        return ((n = +n) || 1 / n) >= 0;\n    };\n    for (var i = 0; i <= maxOrder; i += 1) {\n        assignments[i] = [];\n        prevSegmentPerOrderPerTrack[i] = [];\n        for (var j = 0; j < numberOfTracks; j += 1) {\n            prevSegmentPerOrderPerTrack[i][j] = null;\n        }\n    }\n    tracks.forEach(function (track, trackNo) {\n        currentNodeIndex = Math.abs(track.indexSequence[0]);\n        currentNodeIsForward = isPositive(track.indexSequence[0]);\n        currentNode = nodes[currentNodeIndex];\n        track.path = [];\n        track.path.push({\n            order: currentNode.order,\n            lane: null,\n            isForward: currentNodeIsForward,\n            node: currentNodeIndex\n        });\n        addToAssignment(currentNode.order, currentNodeIndex, trackNo, 0, prevSegmentPerOrderPerTrack);\n        segmentNumber = 1;\n        for (var _i4 = 1; _i4 < track.sequence.length; _i4 += 1) {\n            previousNode = currentNode;\n            previousNodeIsForward = currentNodeIsForward;\n            currentNodeIndex = Math.abs(track.indexSequence[_i4]);\n            currentNodeIsForward = isPositive(track.indexSequence[_i4]);\n            currentNode = nodes[currentNodeIndex];\n            if (currentNode.order > previousNode.order) {\n                if (!previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j5 = previousNode.order + 1; _j5 < currentNode.order; _j5 += 1) {\n                    track.path.push({\n                        order: _j5,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(_j5, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (!currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else if (currentNode.order < previousNode.order) {\n                if (previousNodeIsForward) {\n                    track.path.push({\n                        order: previousNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(previousNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                for (var _j6 = previousNode.order - 1; _j6 > currentNode.order; _j6 -= 1) {\n                    track.path.push({\n                        order: _j6,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(_j6, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n                if (currentNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: true,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: false,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            } else {\n                if (currentNodeIsForward !== previousNodeIsForward) {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                } else {\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: !currentNodeIsForward,\n                        node: null\n                    });\n                    addToAssignment(currentNode.order, null, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                    track.path.push({\n                        order: currentNode.order,\n                        lane: null,\n                        isForward: currentNodeIsForward,\n                        node: currentNodeIndex\n                    });\n                    addToAssignment(currentNode.order, currentNodeIndex, trackNo, segmentNumber, prevSegmentPerOrderPerTrack);\n                    segmentNumber += 1;\n                }\n            }\n        }\n    });\n    for (var _i5 = 0; _i5 <= maxOrder; _i5 += 1) {\n        generateSingleLaneAssignment(assignments[_i5], _i5);\n    }\n}\nfunction addToAssignment(order, nodeIndex, trackNo, segmentID, prevSegmentPerOrderPerTrack) {\n    var compareToFromSame = prevSegmentPerOrderPerTrack[order][trackNo];\n    if (nodeIndex === null) {\n        assignments[order].push({\n            type: 'single',\n            node: null,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    } else {\n        for (var i = 0; i < assignments[order].length; i += 1) {\n            if (assignments[order][i].node === nodeIndex) {\n                assignments[order][i].type = 'multiple';\n                assignments[order][i].tracks.push({\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                });\n                prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][i].tracks[assignments[order][i].tracks.length - 1];\n                return;\n            }\n        }\n        assignments[order].push({\n            type: 'single',\n            node: nodeIndex,\n            tracks: [{\n                    trackID: trackNo,\n                    segmentID: segmentID,\n                    compareToFromSame: compareToFromSame\n                }]\n        });\n        prevSegmentPerOrderPerTrack[order][trackNo] = assignments[order][assignments[order].length - 1].tracks[0];\n    }\n}\nfunction getIdealLanesAndCoords(assignment, order) {\n    var index = void 0;\n    assignment.forEach(function (node) {\n        node.idealLane = 0;\n        node.tracks.forEach(function (track) {\n            if (track.segmentID === 0) {\n                track.idealLane = track.trackID;\n                track.idealY = null;\n            } else {\n                if (tracks[track.trackID].path[track.segmentID - 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID - 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID - 1].y;\n                } else if (track.segmentID < tracks[track.trackID].path.length - 1 && tracks[track.trackID].path[track.segmentID + 1].order === order - 1) {\n                    track.idealLane = tracks[track.trackID].path[track.segmentID + 1].lane;\n                    track.idealY = tracks[track.trackID].path[track.segmentID + 1].y;\n                } else {\n                    index = track.segmentID - 1;\n                    while (index >= 0 && tracks[track.trackID].path[index].order !== order - 1) {\n                        index -= 1;\n                    }\n                    if (index < 0) {\n                        track.idealLane = track.trackID;\n                        track.idealY = null;\n                    } else {\n                        track.idealLane = tracks[track.trackID].path[index].lane;\n                        track.idealY = tracks[track.trackID].path[index].y;\n                    }\n                }\n            }\n            node.idealLane += track.idealLane;\n        });\n        node.idealLane /= node.tracks.length;\n    });\n}\nfunction generateSingleLaneAssignment(assignment, order) {\n    var currentLane = 0;\n    var potentialAdjustmentValues = new Set();\n    var currentY = 20;\n    var prevNameIsNull = false;\n    var prevTrack = -1;\n    getIdealLanesAndCoords(assignment, order);\n    assignment.sort(compareByIdealLane);\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].topLane = currentLane;\n            if (prevNameIsNull)\n                currentY -= 10;\n            nodes[node.node].y = currentY;\n            nodes[node.node].contentHeight = 0;\n            prevNameIsNull = false;\n        } else {\n            if (prevNameIsNull)\n                currentY -= 25;\n            else if (currentY > 20)\n                currentY -= 10;\n            prevNameIsNull = true;\n        }\n        node.tracks.sort(compareByIdealLane);\n        node.tracks.forEach(function (track) {\n            track.lane = currentLane;\n            if (track.trackID === prevTrack && node.node === null && prevNameIsNull)\n                currentY += 10;\n            tracks[track.trackID].path[track.segmentID].lane = currentLane;\n            tracks[track.trackID].path[track.segmentID].y = currentY;\n            if (track.idealY !== null)\n                potentialAdjustmentValues.add(track.idealY - currentY);\n            currentLane += 1;\n            currentY += tracks[track.trackID].width;\n            if (node.node !== null) {\n                nodes[node.node].contentHeight += tracks[track.trackID].width;\n            }\n            prevTrack = track.trackID;\n        });\n        currentY += 25;\n    });\n    adjustVertically(assignment, potentialAdjustmentValues);\n}\nfunction adjustVertically(assignment, potentialAdjustmentValues) {\n    var verticalAdjustment = 0;\n    var minAdjustmentCost = Number.MAX_SAFE_INTEGER;\n    potentialAdjustmentValues.forEach(function (moveBy) {\n        if (getVerticalAdjustmentCost(assignment, moveBy) < minAdjustmentCost) {\n            minAdjustmentCost = getVerticalAdjustmentCost(assignment, moveBy);\n            verticalAdjustment = moveBy;\n        }\n    });\n    assignment.forEach(function (node) {\n        if (node.node !== null) {\n            nodes[node.node].y += verticalAdjustment;\n        }\n        node.tracks.forEach(function (track) {\n            tracks[track.trackID].path[track.segmentID].y += verticalAdjustment;\n        });\n    });\n}\nfunction adjustVertically3(node, adjustBy) {\n    if (node.hasOwnProperty('order')) {\n        assignments[node.order].forEach(function (assignmentNode) {\n            if (assignmentNode.node !== null) {\n                var aNode = nodes[assignmentNode.node];\n                if (aNode !== node && aNode.y > node.y) {\n                    aNode.y += adjustBy;\n                    assignmentNode.tracks.forEach(function (track) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    });\n                }\n            } else {\n                assignmentNode.tracks.forEach(function (track) {\n                    if (tracks[track.trackID].path[track.segmentID].y >= node.y) {\n                        tracks[track.trackID].path[track.segmentID].y += adjustBy;\n                    }\n                });\n            }\n        });\n        if (nodesPerOrder[node.order].length > 0) {\n            nodesPerOrder[node.order].forEach(function (nodeIndex) {\n                if (nodes[nodeIndex] !== node && nodes[nodeIndex].y > node.y) {\n                    nodes[nodeIndex].y += adjustBy;\n                }\n            });\n        }\n    }\n}\nfunction getVerticalAdjustmentCost(assignment, moveBy) {\n    var result = 0;\n    assignment.forEach(function (node) {\n        node.tracks.forEach(function (track) {\n            if (track.idealY !== null && tracks[track.trackID].type !== 'read') {\n                result += Math.abs(track.idealY - moveBy - tracks[track.trackID].path[track.segmentID].y) * tracks[track.trackID].width;\n            }\n        });\n    });\n    return result;\n}\nfunction compareByIdealLane(a, b) {\n    if (a.hasOwnProperty('idealLane')) {\n        if (b.hasOwnProperty('idealLane')) {\n            if (a.idealLane < b.idealLane)\n                return -1;\n            else if (a.idealLane > b.idealLane)\n                return 1;\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('idealLane')) {\n        return 1;\n    }\n    return 0;\n}\nfunction compareNodesByOrder(a, b) {\n    if (a === null) {\n        if (b === null)\n            return 0;\n        return -1;\n    }\n    if (b === null)\n        return 1;\n    if (a.hasOwnProperty('order')) {\n        if (b.hasOwnProperty('order')) {\n            if (a.order < b.order)\n                return -1;\n            else if (a.order > b.order)\n                return 1;\n            if (a.hasOwnProperty('y') && b.hasOwnProperty('y')) {\n                if (a.y < b.y)\n                    return -1;\n                else if (a.y > b.y)\n                    return 1;\n            }\n            return 0;\n        }\n        return -1;\n    }\n    if (b.hasOwnProperty('order'))\n        return 1;\n    return 0;\n}\nfunction addTrackFeatures() {\n    var nodeStart = void 0;\n    var nodeEnd = void 0;\n    var feature = {};\n    bed.forEach(function (line) {\n        var i = 0;\n        while (i < numberOfTracks && tracks[i].name !== line.track) {\n            i += 1;\n        }\n        if (i < numberOfTracks) {\n            nodeStart = 0;\n            tracks[i].path.forEach(function (node) {\n                if (node.node !== null) {\n                    feature = {};\n                    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n                        nodeEnd = nodeStart + nodes[node.node].sequenceLength - 1;\n                    } else {\n                        nodeEnd = nodeStart + nodes[node.node].width - 1;\n                    }\n                    if (nodeStart >= line.start && nodeStart <= line.end)\n                        feature.start = 0;\n                    if (nodeStart < line.start && nodeEnd >= line.start)\n                        feature.start = line.start - nodeStart;\n                    if (nodeEnd <= line.end && nodeEnd >= line.start) {\n                        feature.end = nodeEnd - nodeStart;\n                        if (nodeEnd < line.end)\n                            feature.continue = true;\n                    }\n                    if (nodeEnd > line.end && nodeStart <= line.end)\n                        feature.end = line.end - nodeStart;\n                    if (feature.hasOwnProperty('start')) {\n                        feature.type = line.type;\n                        feature.name = line.name;\n                        if (!node.hasOwnProperty('features'))\n                            node.features = [];\n                        node.features.push(feature);\n                    }\n                    nodeStart = nodeEnd + 1;\n                }\n            });\n        } else {\n        }\n    });\n}\nfunction calculateTrackWidth() {\n    var allAreFour = true;\n    tracks.forEach(function (track) {\n        if (track.hasOwnProperty('freq')) {\n            track.width = Math.round((Math.log(track.freq) + 1) * 4);\n        } else {\n            track.width = 15;\n            if (track.hasOwnProperty('type') && track.type === 'read') {\n                track.width = 4;\n            }\n        }\n        if (track.width !== 4) {\n            allAreFour = false;\n        }\n    });\n    if (allAreFour) {\n        tracks.forEach(function (track) {\n            if (track.hasOwnProperty('freq')) {\n                track.width = 15;\n            }\n        });\n    }\n}\nfunction useColorScheme(x) {\n    config.colorScheme = x;\n    svg = d3.select(svgID);\n    var tr = createTubeMap();\n    if (!config.hideLegendFlag)\n        drawLegend(tr);\n}\nfunction assignColorSets() {\n    haplotypeColors = getColorSet(config.haplotypeColors);\n    forwardReadColors = getColorSet(config.forwardReadColors);\n    reverseReadColors = getColorSet(config.reverseReadColors);\n    exonColors = getColorSet(config.exonColors);\n}\nfunction getColorSet(colorSetName) {\n    switch (colorSetName) {\n    case 'plainColors':\n        return plainColors;\n    case 'reds':\n        return reds;\n    case 'blues':\n        return blues;\n    case 'greys':\n        return greys;\n    case 'lightColors':\n        return lightColors;\n    default:\n        return greys;\n    }\n}\nfunction generateTrackColor(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = reverseReadColors[track.id % reverseReadColors.length];\n        } else {\n            trackColor = forwardReadColors[track.id % forwardReadColors.length];\n        }\n    } else {\n        if (config.showExonsFlag === false || highlight !== 'plain') {\n            trackColor = haplotypeColors[track.id % haplotypeColors.length];\n        } else {\n            trackColor = exonColors[track.id % exonColors.length];\n        }\n    }\n    return trackColor;\n}\nfunction generateTrackColorOLD(track, highlight) {\n    if (typeof highlight === 'undefined')\n        highlight = 'plain';\n    var trackColor = void 0;\n    if (track.hasOwnProperty('type') && track.type === 'read') {\n        if (track.hasOwnProperty('is_reverse') && track.is_reverse === true) {\n            trackColor = blues[track.id % blues.length];\n        } else {\n            trackColor = reds[track.id % reds.length];\n        }\n    } else {\n        if (config.colorScheme === 0) {\n            if (config.showExonsFlag === false || highlight !== 'plain') {\n                trackColor = plainColors[track.id % plainColors.length];\n            } else {\n                trackColor = lightColors[track.id % lightColors.length];\n            }\n        } else if (config.colorScheme === 1) {\n            if (config.showExonsFlag === false || highlight === 'plain') {\n                trackColor = greys[track.id % greys.length];\n            } else {\n                trackColor = reds[track.id % reds.length];\n            }\n        }\n    }\n    return trackColor;\n}\nfunction getReadXStart(read) {\n    var node = nodes[read.path[0].node];\n    if (read.path[0].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.firstNodeOffset);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.firstNodeOffset);\n}\nfunction getReadXEnd(read) {\n    var node = nodes[read.path[read.path.length - 1].node];\n    if (read.path[read.path.length - 1].isForward) {\n        return getXCoordinateOfBaseWithinNode(node, read.finalNodeCoverLength);\n    }\n    return getXCoordinateOfBaseWithinNode(node, node.sequenceLength - read.finalNodeCoverLength);\n}\nfunction getXCoordinateOfBaseWithinNode(node, base) {\n    if (base > node.sequenceLength)\n        return null;\n    var nodeLeftX = node.x - 4;\n    var nodeRightX = node.x + node.pixelWidth + 4;\n    return nodeLeftX + base / node.sequenceLength * (nodeRightX - nodeLeftX);\n}\nfunction generateSVGShapesFromPath() {\n    var xStart = void 0;\n    var xEnd = void 0;\n    var yStart = void 0;\n    var yEnd = void 0;\n    var trackColor = void 0;\n    var highlight = void 0;\n    var dummy = void 0;\n    var reversalFlag = void 0;\n    for (var i = 0; i <= maxOrder; i += 1) {\n        extraLeft.push(0);\n        extraRight.push(0);\n    }\n    var orderStartX = [];\n    var orderEndX = [];\n    nodes.forEach(function (node) {\n        if (node.hasOwnProperty('order')) {\n            orderStartX[node.order] = node.x;\n            if (orderEndX[node.order] === undefined)\n                orderEndX[node.order] = node.x + node.pixelWidth;\n            else\n                orderEndX[node.order] = Math.max(orderEndX[node.order], node.x + node.pixelWidth);\n        }\n    });\n    tracks.forEach(function (track) {\n        highlight = 'plain';\n        trackColor = generateTrackColor(track, highlight);\n        yStart = track.path[0].y;\n        if (track.type !== 'read') {\n            if (track.sequence[0].charAt(0) === '-') {\n                xStart = orderEndX[track.path[0].order] + 20;\n            } else {\n                xStart = orderStartX[track.path[0].order] - 20;\n            }\n        } else {\n            xStart = getReadXStart(track);\n        }\n        for (var _i6 = 0; _i6 < track.path.length; _i6 += 1) {\n            if (track.path[_i6].y === yStart) {\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (_i6 > 0 && track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            } else {\n                if (track.path[_i6 - 1].isForward) {\n                    xEnd = orderEndX[track.path[_i6 - 1].order];\n                } else {\n                    xEnd = orderStartX[track.path[_i6 - 1].order];\n                }\n                if (xEnd !== xStart) {\n                    trackColor = generateTrackColor(track, highlight);\n                    trackRectangles.push({\n                        xStart: Math.min(xStart, xEnd),\n                        yStart: yStart,\n                        xEnd: Math.max(xStart, xEnd),\n                        yEnd: yStart + track.width - 1,\n                        color: trackColor,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (track.path[_i6].order - 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderStartX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart,\n                        yStart: yStart,\n                        xEnd: xEnd + 1,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else if (track.path[_i6].order + 1 === track.path[_i6 - 1].order) {\n                    xStart = xEnd;\n                    xEnd = orderEndX[track.path[_i6].order];\n                    yEnd = track.path[_i6].y;\n                    trackColor = generateTrackColor(track, highlight);\n                    trackCurves.push({\n                        xStart: xStart + 1,\n                        yStart: yStart,\n                        xEnd: xEnd,\n                        yEnd: yEnd,\n                        width: track.width,\n                        color: trackColor,\n                        laneChange: Math.abs(track.path[_i6].lane - track.path[_i6 - 1].lane),\n                        id: track.id,\n                        type: track.type\n                    });\n                    xStart = xEnd;\n                    yStart = yEnd;\n                } else {\n                    if (track.path[_i6 - 1].isForward) {\n                        yEnd = track.path[_i6].y;\n                        generateForwardToReverse(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderEndX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    } else {\n                        yEnd = track.path[_i6].y;\n                        generateReverseToForward(xEnd, yStart, yEnd, track.width, trackColor, track.id, track.path[_i6].order, track.type);\n                        xStart = orderStartX[track.path[_i6].order];\n                        yStart = track.path[_i6].y;\n                    }\n                }\n                if (track.path[_i6].hasOwnProperty('features')) {\n                    if (track.path[_i6 - 1].order === track.path[_i6].order)\n                        reversalFlag = true;\n                    else\n                        reversalFlag = false;\n                    dummy = createFeatureRectangle(track.path[_i6], orderStartX[track.path[_i6].order], orderEndX[track.path[_i6].order], highlight, track, xStart, yStart, trackColor, reversalFlag);\n                    highlight = dummy.highlight;\n                    xStart = dummy.xStart;\n                }\n            }\n        }\n        if (track.type !== 'read') {\n            if (!track.path[track.path.length - 1].isForward) {\n                xEnd = orderStartX[track.path[track.path.length - 1].order] - 20;\n            } else {\n                xEnd = orderEndX[track.path[track.path.length - 1].order] + 20;\n            }\n        } else {\n            xEnd = getReadXEnd(track);\n        }\n        trackRectangles.push({\n            xStart: Math.min(xStart, xEnd),\n            yStart: yStart,\n            xEnd: Math.max(xStart, xEnd),\n            yEnd: yStart + track.width - 1,\n            color: trackColor,\n            id: track.id,\n            type: track.type\n        });\n    });\n}\nfunction createFeatureRectangle(node, nodeXStart, nodeXEnd, highlight, track, rectXStart, yStart, trackColor, reversalFlag) {\n    var nodeWidth = void 0;\n    var currentHighlight = highlight;\n    var c = void 0;\n    var co = void 0;\n    var featureXStart = void 0;\n    var featureXEnd = void 0;\n    nodeXStart -= 8;\n    nodeXEnd += 8;\n    if (nodes[node.node].hasOwnProperty('sequenceLength')) {\n        nodeWidth = nodes[node.node].sequenceLength;\n    } else {\n        nodeWidth = nodes[node.node].width;\n    }\n    node.features.sort(function (a, b) {\n        return a.start - b.start;\n    });\n    node.features.forEach(function (feature) {\n        if (currentHighlight !== feature.type) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXStart = nodeXStart + Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart < nodeXStart + 8) {\n                    featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart,\n                        yStart: yStart,\n                        xEnd: featureXEnd,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (featureXStart > rectXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: rectXStart,\n                        yStart: yStart,\n                        xEnd: featureXStart - 1,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            } else {\n                featureXStart = nodeXEnd - Math.round(feature.start * (nodeXEnd - nodeXStart + 1) / nodeWidth);\n                if (reversalFlag && featureXStart > nodeXEnd - 8) {\n                    featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                    co = generateTrackColor(track, feature.type);\n                    trackRectanglesStep3.push({\n                        xStart: featureXEnd,\n                        yStart: yStart,\n                        xEnd: featureXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: co,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n                if (rectXStart > featureXStart + 1) {\n                    trackRectanglesStep3.push({\n                        xStart: featureXStart + 1,\n                        yStart: yStart,\n                        xEnd: rectXStart,\n                        yEnd: yStart + track.width - 1,\n                        color: c,\n                        id: track.id,\n                        type: track.type\n                    });\n                }\n            }\n            rectXStart = featureXStart;\n            currentHighlight = feature.type;\n        }\n        if (feature.end < nodeWidth - 1 || !feature.hasOwnProperty('continue')) {\n            c = generateTrackColor(track, currentHighlight);\n            if (node.isForward === true) {\n                featureXEnd = nodeXStart + Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: rectXStart,\n                    yStart: yStart,\n                    xEnd: featureXEnd,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            } else {\n                featureXEnd = nodeXEnd - Math.round((feature.end + 1) * (nodeXEnd - nodeXStart + 1) / nodeWidth) - 1;\n                trackRectanglesStep3.push({\n                    xStart: featureXEnd,\n                    yStart: yStart,\n                    xEnd: rectXStart,\n                    yEnd: yStart + track.width - 1,\n                    color: c,\n                    id: track.id,\n                    type: track.type\n                });\n            }\n            rectXStart = featureXEnd + 1;\n            currentHighlight = 'plain';\n        }\n    });\n    return {\n        xStart: rectXStart,\n        highlight: currentHighlight\n    };\n}\nfunction generateForwardToReverse(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    x += 10 * extraRight[order];\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yStart,\n        xEnd: x + 5,\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x + 5 + radius,\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x + 5 + radius + Math.min(7, trackWidth) - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 10 * extraRight[order],\n        yStart: yEnd,\n        xEnd: x + 5,\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x + 5) + ' ' + yBottom;\n    d += ' Q ' + (x + 5 + radius) + ' ' + yBottom + ' ' + (x + 5 + radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x + 5 + radius + Math.min(7, trackWidth));\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x + 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x + 5) + ' ' + yTop;\n    d += ' Q ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x + 5 + radius + Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x + 5 + radius);\n    d += ' Q ' + (x + 5 + radius) + ' ' + (yTop + trackWidth) + ' ' + (x + 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraRight[order] += 1;\n}\nfunction generateReverseToForward(x, yStart, yEnd, trackWidth, trackColor, trackID, order, type) {\n    var yTop = Math.min(yStart, yEnd);\n    var yBottom = Math.max(yStart, yEnd);\n    var radius = 7;\n    x -= 10 * extraLeft[order];\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yStart,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yStart + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 5 - radius - Math.min(7, trackWidth),\n        yStart: yTop + trackWidth + radius - 1,\n        xEnd: x - 5 - radius - 1,\n        yEnd: yBottom - radius + 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    trackVerticalRectangles.push({\n        xStart: x - 6,\n        yStart: yEnd,\n        xEnd: x + 10 * extraLeft[order],\n        yEnd: yEnd + trackWidth - 1,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    var d = 'M ' + (x - 5) + ' ' + yBottom;\n    d += ' Q ' + (x - 5 - radius) + ' ' + yBottom + ' ' + (x - 5 - radius) + ' ' + (yBottom - radius);\n    d += ' H ' + (x - 5 - radius - Math.min(7, trackWidth));\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yBottom + trackWidth) + ' ' + (x - 5) + ' ' + (yBottom + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    d = 'M ' + (x - 5) + ' ' + yTop;\n    d += ' Q ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + yTop + ' ' + (x - 5 - radius - Math.min(7, trackWidth)) + ' ' + (yTop + trackWidth + radius);\n    d += ' H ' + (x - 5 - radius);\n    d += ' Q ' + (x - 5 - radius) + ' ' + (yTop + trackWidth) + ' ' + (x - 5) + ' ' + (yTop + trackWidth);\n    d += ' Z ';\n    trackCorners.push({\n        path: d,\n        color: trackColor,\n        id: trackID,\n        type: type\n    });\n    extraLeft[order] += 1;\n}\nfunction drawReversalsByColor(corners, rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var co = new Set();\n    rectangles.forEach(function (rect) {\n        co.add(rect.color);\n    });\n    co.forEach(function (c) {\n        drawTrackRectangles(rectangles.filter(filterObjectByAttribute('color', c)), type);\n        drawTrackCorners(corners.filter(filterObjectByAttribute('color', c)), type);\n    });\n}\nfunction drawNodes(dNodes) {\n    var x = void 0;\n    var y = void 0;\n    dNodes.forEach(function (node) {\n        node.d = 'M ' + (node.x - 9) + ' ' + node.y + ' Q ' + (node.x - 9) + ' ' + (node.y - 9) + ' ' + node.x + ' ' + (node.y - 9);\n        x = node.x;\n        y = node.y - 9;\n        if (node.width > 1) {\n            x += node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x + 9) + ' ' + y + ' ' + (x + 9) + ' ' + (y + 9);\n        x += 9;\n        y += 9;\n        if (node.contentHeight > 0) {\n            y += node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + x + ' ' + (y + 9) + ' ' + (x - 9) + ' ' + (y + 9);\n        x -= 9;\n        y += 9;\n        if (node.width > 1) {\n            x -= node.pixelWidth;\n            node.d += ' L ' + x + ' ' + y;\n        }\n        node.d += ' Q ' + (x - 9) + ' ' + y + ' ' + (x - 9) + ' ' + (y - 9);\n        x -= 9;\n        y -= 9;\n        if (node.contentHeight > 0) {\n            y -= node.contentHeight - 0;\n            node.d += ' L ' + x + ' ' + y;\n        }\n    });\n    svg.selectAll('.node').data(dNodes).enter().append('path').attr('id', function (d) {\n        return d.name;\n    }).attr('d', function (d) {\n        return d.d;\n    }).on('mouseover', nodeMouseOver).on('mouseout', nodeMouseOut).on('dblclick', nodeDoubleClick).style('fill', '#fff').style('fill-opacity', config.showExonsFlag ? '0.4' : '0.6').style('stroke', 'black').style('stroke-width', '2px').append('svg:title').text(function (d) {\n        return d.name;\n    });\n}\nfunction drawLabels(dNodes) {\n    if (config.nodeWidthOption === 0) {\n        svg.selectAll('text').data(dNodes).enter().append('text').attr('x', function (d) {\n            return d.x - 4;\n        }).attr('y', function (d) {\n            return d.y + 4;\n        }).text(function (d) {\n            return d.seq;\n        }).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n    }\n}\nfunction drawRuler() {\n    var rulerTrackIndex = 0;\n    while (tracks[rulerTrackIndex].name !== trackForRuler) {\n        rulerTrackIndex += 1;\n    }\n    var rulerTrack = tracks[rulerTrackIndex];\n    svg.append('line').attr('x1', 0).attr('y1', minYCoordinate - 10).attr('x2', maxXCoordinate).attr('y2', minYCoordinate - 10).attr('stroke-width', 1).attr('stroke', 'black');\n    var markingInterval = 100;\n    if (config.nodeWidthOption === 0)\n        markingInterval = 20;\n    var indexOfFirstBaseInNode = rulerTrack.indexOfFirstBase;\n    var atLeastOneMarkingDrawn = false;\n    var xCoordOfPreviousMarking = -100;\n    if (config.nodeWidthOption !== 0) {\n        var firstNode = nodes[rulerTrack.indexSequence[0]];\n        xCoordOfPreviousMarking = getXCoordinateOfBaseWithinNode(firstNode, 0);\n        drawRulerMarking(indexOfFirstBaseInNode, xCoordOfPreviousMarking);\n        atLeastOneMarkingDrawn = true;\n    }\n    rulerTrack.indexSequence.forEach(function (nodeIndex) {\n        var currentNode = nodes[nodeIndex];\n        var nextMarking = Math.ceil(indexOfFirstBaseInNode / markingInterval) * markingInterval;\n        while (nextMarking < indexOfFirstBaseInNode + currentNode.sequenceLength) {\n            var xCoordOfMarking = getXCoordinateOfBaseWithinNode(currentNode, nextMarking - indexOfFirstBaseInNode);\n            if (xCoordOfPreviousMarking + 80 <= xCoordOfMarking) {\n                drawRulerMarking(nextMarking, xCoordOfMarking);\n                atLeastOneMarkingDrawn = true;\n                xCoordOfPreviousMarking = xCoordOfMarking;\n            }\n            nextMarking += markingInterval;\n        }\n        indexOfFirstBaseInNode += nodes[nodeIndex].sequenceLength;\n    });\n    if (!atLeastOneMarkingDrawn) {\n        drawRulerMarking(rulerTrack.indexOfFirstBase, nodes[rulerTrack.indexSequence[0]].x - 4);\n    }\n}\nfunction drawRulerMarking(sequencePosition, xCoordinate) {\n    svg.append('text').attr('x', xCoordinate).attr('y', minYCoordinate - 13).text('|' + sequencePosition).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').style('pointer-events', 'none');\n}\nfunction filterObjectByAttribute(attribute, value) {\n    return function (item) {\n        return item[attribute] === value;\n    };\n}\nfunction drawTrackRectangles(rectangles, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    rectangles = rectangles.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackRectangles').data(rectangles).enter().append('rect').attr('x', function (d) {\n        return d.xStart;\n    }).attr('y', function (d) {\n        return d.yStart;\n    }).attr('width', function (d) {\n        return d.xEnd - d.xStart + 1;\n    }).attr('height', function (d) {\n        return d.yEnd - d.yStart + 1;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction compareCurvesByLineChanges(a, b) {\n    if (a[6] < b[6])\n        return -1;\n    else if (a[6] > b[6])\n        return 1;\n    return 0;\n}\nfunction defineSVGPatterns() {\n    var pattern = svg.append('defs').append('pattern').attr({\n            id: 'patternA',\n            width: '7',\n            height: '7',\n            patternUnits: 'userSpaceOnUse',\n            patternTransform: 'rotate(45)'\n        });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '7',\n        height: '7',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '3',\n        height: '3',\n        fill: '#505050'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'patternB',\n        width: '8',\n        height: '8',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '8',\n        height: '8',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '0',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '5',\n        y: '5',\n        width: '3',\n        height: '3',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid0',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#1f77b4'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid1',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#ff7f0e'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid2',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#2ca02c'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid3',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#d62728'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid4',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#9467bd'\n    });\n    pattern = svg.append('defs').append('pattern').attr({\n        id: 'plaid5',\n        width: '6',\n        height: '6',\n        patternUnits: 'userSpaceOnUse',\n        patternTransform: 'rotate(45)'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '6',\n        height: '6',\n        fill: '#FFFFFF'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '0',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '0',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n    pattern.append('rect').attr({\n        x: '4',\n        y: '4',\n        width: '2',\n        height: '2',\n        fill: '#8c564b'\n    });\n}\nfunction drawTrackCurves(type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    var myTrackCurves = trackCurves.filter(filterObjectByAttribute('type', type));\n    myTrackCurves.sort(compareCurvesByLineChanges);\n    myTrackCurves.forEach(function (curve) {\n        var xMiddle = (curve.xStart + curve.xEnd) / 2;\n        var d = 'M ' + curve.xStart + ' ' + curve.yStart;\n        d += ' C ' + xMiddle + ' ' + curve.yStart + ' ' + xMiddle + ' ' + curve.yEnd + ' ' + curve.xEnd + ' ' + curve.yEnd;\n        d += ' V ' + (curve.yEnd + curve.width);\n        d += ' C ' + xMiddle + ' ' + (curve.yEnd + curve.width) + ' ' + xMiddle + ' ' + (curve.yStart + curve.width) + ' ' + curve.xStart + ' ' + (curve.yStart + curve.width);\n        d += ' Z';\n        curve.path = d;\n    });\n    svg.selectAll('trackCurves').data(trackCurves).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawTrackCorners(corners, type) {\n    if (typeof type === 'undefined')\n        type = 'haplo';\n    corners = corners.filter(filterObjectByAttribute('type', type));\n    svg.selectAll('trackCorners').data(corners).enter().append('path').attr('d', function (d) {\n        return d.path;\n    }).style('fill', function (d) {\n        return d.color;\n    }).attr('trackID', function (d) {\n        return d.id;\n    }).attr('class', function (d) {\n        return 'track' + d.id;\n    }).attr('color', function (d) {\n        return d.color;\n    }).on('mouseover', trackMouseOver).on('mouseout', trackMouseOut).on('dblclick', trackDoubleClick);\n}\nfunction drawLegend() {\n    var content = '<table class=\"table-sm table-condensed table-nonfluid\"><thead><tr><th>Color</th><th>Trackname</th><th>Show Track</th></tr></thead>';\n    var listeners = [];\n    for (var i = 0; i < tracks.length; i += 1) {\n        if (tracks[i].type === 'haplo') {\n            content += '<tr><td style=\"text-align:right\"><div class=\"color-box\" style=\"background-color: ' + generateTrackColor(tracks[i], 'exon') + ';\"></div></td>';\n            if (tracks[i].hasOwnProperty('name')) {\n                content += '<td>' + tracks[i].name + '</td>';\n            } else {\n                content += '<td>' + tracks[i].id + '</td>';\n            }\n            content += '<td><input type=\"checkbox\" checked=true id=\"showTrack' + i + '\"></td>';\n            listeners.push(i);\n        }\n    }\n    content += '</table';\n    $('#legendDiv').html(content);\n    listeners.forEach(function (i) {\n        document.getElementById('showTrack' + i).addEventListener('click', function () {\n            return changeTrackVisibility(i);\n        }, false);\n    });\n}\nfunction trackMouseOver() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).style('fill', 'url(#patternA)');\n}\nfunction nodeMouseOver() {\n    d3.select(this).style('stroke-width', '4px');\n}\nfunction trackMouseOut() {\n    var trackID = d3.select(this).attr('trackID');\n    d3.selectAll('.track' + trackID).each(function clearTrackHighlight() {\n        var c = d3.select(this).attr('color');\n        d3.select(this).style('fill', c);\n    });\n}\nfunction nodeMouseOut() {\n    d3.select(this).style('stroke-width', '2px');\n}\nfunction trackDoubleClick() {\n    var trackID = d3.select(this).attr('trackID');\n    var index = 0;\n    while (index < inputTracks.length && inputTracks[index].id !== Number(trackID)) {\n        index += 1;\n    }\n    if (index >= inputTracks.length)\n        return;\n    console.log('moving index: ' + index);\n    moveTrackToFirstPosition(index);\n    createTubeMap();\n}\nfunction nodeDoubleClick() {\n    var nodeID = d3.select(this).attr('id');\n    if (config.clickableNodesFlag) {\n        if (reads && config.showReads) {\n            document.getElementById('hgvmNodeID').value = nodeID;\n            document.getElementById('hgvmPostButton').click();\n        } else {\n            document.getElementById('nodeID').value = nodeID;\n            document.getElementById('postButton').click();\n        }\n    }\n}\nfunction vgExtractNodes(vg) {\n    var result = [];\n    vg.node.forEach(function (node) {\n        result.push({\n            name: '' + node.id,\n            sequenceLength: node.sequence.length,\n            seq: node.sequence\n        });\n    });\n    return result;\n}\nfunction generateNodeWidth() {\n    nodes.forEach(function (node) {\n        if (!node.hasOwnProperty('sequenceLength')) {\n            node.sequenceLength = node.seq.length;\n        }\n    });\n    switch (config.nodeWidthOption) {\n    case 1:\n        nodes.forEach(function (node) {\n            node.width = 1 + Math.log(node.sequenceLength) / Math.log(2);\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    case 2:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength / 100;\n            node.pixelWidth = Math.round((node.width - 1) * 8.401);\n        });\n        break;\n    default:\n        nodes.forEach(function (node) {\n            node.width = node.sequenceLength;\n            svg.append('text').attr('x', 0).attr('y', 100).attr('id', 'dummytext').text(node.seq.substr(1)).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '14px').attr('fill', 'black').style('pointer-events', 'none');\n            node.pixelWidth = Math.round(document.getElementById('dummytext').getComputedTextLength());\n            $('#dummytext').remove();\n        });\n    }\n}\nfunction vgExtractTracks(vg) {\n    var result = [];\n    vg.path.forEach(function (path, index) {\n        var sequence = [];\n        var isCompletelyReverse = true;\n        path.mapping.forEach(function (pos) {\n            if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                sequence.push('-' + pos.position.node_id);\n            } else {\n                sequence.push('' + pos.position.node_id);\n                isCompletelyReverse = false;\n            }\n        });\n        if (isCompletelyReverse) {\n            sequence.reverse();\n            sequence.forEach(function (node, index2) {\n                sequence[index2] = node.substr(1);\n            });\n        }\n        var track = {};\n        track.id = index;\n        track.sequence = sequence;\n        if (path.hasOwnProperty('freq'))\n            track.freq = path.freq;\n        if (path.hasOwnProperty('name'))\n            track.name = path.name;\n        if (path.hasOwnProperty('indexOfFirstBase'))\n            track.indexOfFirstBase = Number(path.indexOfFirstBase);\n        result.push(track);\n    });\n    return result;\n}\nfunction compareReadsByLeftEnd(a, b) {\n    var leftNodeA = void 0;\n    var leftNodeB = void 0;\n    var leftIndexA = void 0;\n    var leftIndexB = void 0;\n    if (a.sequence[0].charAt(0) === '-') {\n        if (a.sequence[a.sequence.length - 1].charAt(0) === '-') {\n            leftNodeA = a.sequence[a.sequence.length - 1].substr(1);\n            leftIndexA = nodes[nodeMap.get(leftNodeA)].sequenceLength - a.finalNodeCoverLength;\n        } else {\n            leftNodeA = a.sequence[a.sequence.length - 1];\n            leftIndexA = 0;\n        }\n    } else {\n        leftNodeA = a.sequence[0];\n        leftIndexA = a.firstNodeOffset;\n    }\n    if (b.sequence[0].charAt(0) === '-') {\n        if (b.sequence[b.sequence.length - 1].charAt(0) === '-') {\n            leftNodeB = b.sequence[b.sequence.length - 1].substr(1);\n            leftIndexB = nodes[nodeMap.get(leftNodeB)].sequenceLength - b.finalNodeCoverLength;\n        } else {\n            leftNodeB = b.sequence[b.sequence.length - 1];\n            leftIndexB = 0;\n        }\n    } else {\n        leftNodeB = b.sequence[0];\n        leftIndexB = b.firstNodeOffset;\n    }\n    if (leftNodeA < leftNodeB)\n        return -1;\n    else if (leftNodeA > leftNodeB)\n        return 1;\n    if (leftIndexA < leftIndexB)\n        return -1;\n    else if (leftIndexA > leftIndexB)\n        return 1;\n    return 0;\n}\nfunction compareReadsByLeftEnd2(a, b) {\n    if (nodes[a.indexSequence[0]].order < nodes[b.indexSequence[0]].order)\n        return -1;\n    else if (nodes[a.indexSequence[0]].order > nodes[b.indexSequence[0]].order)\n        return 1;\n    if (a.firstNodeOffset < b.firstNodeOffset)\n        return -1;\n    else if (a.firstNodeOffset > b.firstNodeOffset)\n        return 1;\n    if (nodes[a.indexSequence[a.indexSequence.length - 1]].order < nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return -1;\n    else if (nodes[a.indexSequence[a.indexSequence.length - 1]].order > nodes[b.indexSequence[b.indexSequence.length - 1]].order)\n        return 1;\n    if (a.finalNodeCoverLength < b.finalNodeCoverLength)\n        return -1;\n    else if (a.finalNodeCoverLength > b.finalNodeCoverLength)\n        return 1;\n    return 0;\n}\nfunction vgExtractReads(myNodes, myTracks, myReads) {\n    console.log(myReads);\n    var extracted = [];\n    var nodeNames = [];\n    myNodes.forEach(function (node) {\n        nodeNames.push(parseInt(node.name, 10));\n    });\n    var _loop3 = function _loop3(i) {\n        var read = myReads[i];\n        var sequence = [];\n        var sequenceNew = [];\n        var firstIndex = -1;\n        var lastIndex = -1;\n        read.path.mapping.forEach(function (pos, j) {\n            if (nodeNames.indexOf(pos.position.node_id) > -1) {\n                var edit = {};\n                var offset = 0;\n                if (pos.position.hasOwnProperty('is_reverse') && pos.position.is_reverse === true) {\n                    sequence.push('-' + pos.position.node_id);\n                    edit.nodeName = '-' + pos.position.node_id;\n                } else {\n                    sequence.push('' + pos.position.node_id);\n                    edit.nodeName = pos.position.node_id.toString();\n                }\n                if (firstIndex < 0) {\n                    firstIndex = j;\n                    if (pos.position.hasOwnProperty('offset')) {\n                        offset = pos.position.offset;\n                    }\n                }\n                lastIndex = j;\n                var mismatches = [];\n                var posWithinNode = offset;\n                pos.edit.forEach(function (element) {\n                    if (element.hasOwnProperty('to_length') && !element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'insertion',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    } else if (!element.hasOwnProperty('to_length') && element.hasOwnProperty('from_length')) {\n                        mismatches.push({\n                            type: 'deletion',\n                            pos: posWithinNode,\n                            length: element.from_length\n                        });\n                    } else if (element.hasOwnProperty('sequence')) {\n                        if (element.sequence.length > 1) {\n                            console.log('found substitution at read ' + i + ', node ' + j + ' = ' + pos.position.node_id + ', seq = ' + element.sequence);\n                        }\n                        mismatches.push({\n                            type: 'substitution',\n                            pos: posWithinNode,\n                            seq: element.sequence\n                        });\n                    }\n                    if (element.hasOwnProperty('from_length')) {\n                        posWithinNode += element.from_length;\n                    }\n                });\n                edit.mismatches = mismatches;\n                sequenceNew.push(edit);\n            }\n        });\n        if (sequence.length === 0) {\n            console.log('read ' + i + ' is empty');\n        } else {\n            var track = {};\n            track.id = myTracks.length + extracted.length;\n            track.sequence = sequence;\n            track.sequenceNew = sequenceNew;\n            track.type = 'read';\n            if (read.path.hasOwnProperty('freq'))\n                track.freq = read.path.freq;\n            if (read.path.hasOwnProperty('name'))\n                track.name = read.path.name;\n            track.firstNodeOffset = 0;\n            if (read.path.mapping[firstIndex].position.hasOwnProperty('offset')) {\n                track.firstNodeOffset = read.path.mapping[firstIndex].position.offset;\n            }\n            var finalNodeEdit = read.path.mapping[lastIndex].edit;\n            track.finalNodeCoverLength = 0;\n            if (read.path.mapping[lastIndex].position.hasOwnProperty('offset')) {\n                track.finalNodeCoverLength += read.path.mapping[lastIndex].position.offset;\n            }\n            finalNodeEdit.forEach(function (edit) {\n                if (edit.hasOwnProperty('from_length')) {\n                    track.finalNodeCoverLength += edit.from_length;\n                }\n            });\n            extracted.push(track);\n        }\n    };\n    for (var i = 0; i < myReads.length; i += 1) {\n        _loop3(i);\n    }\n    return extracted;\n}\nfunction mergeNodes() {\n    var nodeName = void 0;\n    var nodeName2 = void 0;\n    var pred = [];\n    var succ = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n        pred.push(new Set());\n        succ.push(new Set());\n    }\n    var tracksAndReads = void 0;\n    if (reads && config.showReads)\n        tracksAndReads = tracks.concat(reads);\n    else\n        tracksAndReads = tracks;\n    tracksAndReads.forEach(function (track) {\n        for (var _i7 = 0; _i7 < track.sequence.length; _i7 += 1) {\n            if (track.sequence[_i7].charAt(0) !== '-') {\n                if (_i7 > 0) {\n                    nodeName = track.sequence[_i7 - 1];\n                    pred[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        pred[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName = track.sequence[_i7 + 1];\n                    succ[nodeMap.get(track.sequence[_i7])].add(nodeName);\n                    if (nodeName.charAt(0) === '-') {\n                        succ[nodeMap.get(track.sequence[_i7])].add(nodeName.substr(1));\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(track.sequence[_i7])].add('None');\n                }\n            } else {\n                nodeName = track.sequence[_i7].substr(1);\n                if (_i7 > 0) {\n                    nodeName2 = track.sequence[_i7 - 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        succ[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        succ[nodeMap.get(nodeName)].add(nodeName2);\n                        succ[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    succ[nodeMap.get(nodeName)].add('None');\n                }\n                if (_i7 < track.sequence.length - 1) {\n                    nodeName2 = track.sequence[_i7 + 1];\n                    if (nodeName2.charAt(0) === '-') {\n                        pred[nodeMap.get(nodeName)].add(nodeName2.substr(1));\n                    } else {\n                        pred[nodeMap.get(nodeName)].add(nodeName2);\n                        pred[nodeMap.get(nodeName)].add('-' + nodeName2);\n                    }\n                } else if (track.type === 'haplo') {\n                    pred[nodeMap.get(nodeName)].add('None');\n                }\n            }\n        }\n    });\n    for (var _i8 = 0; _i8 < nodes.length; _i8 += 1) {\n        succ[_i8] = Array.from(succ[_i8]);\n        pred[_i8] = Array.from(pred[_i8]);\n    }\n    if (reads && config.showReads) {\n        var sortedNodes = nodes.slice();\n        sortedNodes.sort(compareNodesByOrder);\n        var mergeOffset = new Map();\n        var mergeOrigin = new Map();\n        sortedNodes.forEach(function (node) {\n            var predecessor = mergeableWithPred(nodeMap.get(node.name), pred, succ);\n            if (predecessor) {\n                mergeOffset.set(node.name, mergeOffset.get(predecessor) + nodes[nodeMap.get(predecessor)].sequenceLength);\n                mergeOrigin.set(node.name, mergeOrigin.get(predecessor));\n            } else {\n                mergeOffset.set(node.name, 0);\n                mergeOrigin.set(node.name, node.name);\n            }\n        });\n        reads.forEach(function (read) {\n            read.firstNodeOffset += mergeOffset.get(read.sequence[0]);\n            read.finalNodeCoverLength += mergeOffset.get(read.sequence[read.sequence.length - 1]);\n            for (var _i9 = read.sequence.length - 1; _i9 >= 0; _i9 -= 1) {\n                if (mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ)) {\n                    (function () {\n                        var predecessor = mergeableWithPred(nodeMap.get(read.sequence[_i9]), pred, succ);\n                        if (mergeableWithSucc(nodeMap.get(predecessor), pred, succ)) {\n                            if (_i9 > 0) {\n                                read.sequence.splice(_i9, 1);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += nodes[nodeMap.get(predecessor)].sequenceLength;\n                                });\n                                read.sequenceNew[_i9 - 1].mismatches = read.sequenceNew[_i9 - 1].mismatches.concat(read.sequenceNew[_i9].mismatches);\n                                read.sequenceNew.splice(_i9, 1);\n                            } else {\n                                read.sequence[0] = mergeOrigin.get(read.sequence[0]);\n                                read.sequenceNew[_i9].mismatches.forEach(function (mismatch) {\n                                    mismatch.pos += mergeOffset.get(read.sequenceNew[0].nodeName);\n                                });\n                                read.sequenceNew[0].nodeName = mergeOrigin.get(read.sequenceNew[0].nodeName);\n                            }\n                        }\n                    }());\n                }\n            }\n        });\n    }\n    for (var _i10 = 0; _i10 < nodes.length; _i10 += 1) {\n        if (mergeableWithSucc(_i10, pred, succ) && !mergeableWithPred(_i10, pred, succ)) {\n            var donor = _i10;\n            while (mergeableWithSucc(donor, pred, succ)) {\n                donor = succ[donor][0];\n                if (donor.charAt(0) === '-')\n                    donor = donor.substr(1);\n                donor = nodeMap.get(donor);\n                if (nodes[_i10].hasOwnProperty('sequenceLength')) {\n                    nodes[_i10].sequenceLength += nodes[donor].sequenceLength;\n                } else {\n                    nodes[_i10].width += nodes[donor].width;\n                }\n                nodes[_i10].seq += nodes[donor].seq;\n            }\n        }\n    }\n    tracks.forEach(function (track) {\n        for (var _i11 = track.sequence.length - 1; _i11 >= 0; _i11 -= 1) {\n            nodeName = track.sequence[_i11];\n            if (nodeName.charAt(0) === '-')\n                nodeName = nodeName.substr(1);\n            var nodeIndex = nodeMap.get(nodeName);\n            if (mergeableWithPred(nodeIndex, pred, succ)) {\n                track.sequence.splice(_i11, 1);\n            }\n        }\n    });\n    for (var _i12 = nodes.length - 1; _i12 >= 0; _i12 -= 1) {\n        if (mergeableWithPred(_i12, pred, succ)) {\n            nodes.splice(_i12, 1);\n        }\n    }\n}\nfunction mergeableWithPred(index, pred, succ) {\n    if (pred[index].length !== 1)\n        return false;\n    if (pred[index][0] === 'None')\n        return false;\n    var predecessor = pred[index][0];\n    if (predecessor.charAt(0) === '-')\n        predecessor = predecessor.substr(1);\n    var predecessorIndex = nodeMap.get(predecessor);\n    if (succ[predecessorIndex].length !== 1)\n        return false;\n    if (succ[predecessorIndex][0] === 'None')\n        return false;\n    return predecessor;\n}\nfunction mergeableWithSucc(index, pred, succ) {\n    if (succ[index].length !== 1)\n        return false;\n    if (succ[index][0] === 'None')\n        return false;\n    var successor = succ[index][0];\n    if (successor.charAt(0) === '-')\n        successor = successor.substr(1);\n    var successorIndex = nodeMap.get(successor);\n    if (pred[successorIndex].length !== 1)\n        return false;\n    if (pred[successorIndex][0] === 'None')\n        return false;\n    return true;\n}\nfunction drawMismatches() {\n    tracks.forEach(function (read, trackIdx) {\n        if (read.type === 'read') {\n            read.sequenceNew.forEach(function (element, i) {\n                element.mismatches.forEach(function (mm) {\n                    var nodeIndex = nodeMap.get(element.nodeName);\n                    var node = nodes[nodeIndex];\n                    var x = getXCoordinateOfBaseWithinNode(node, mm.pos);\n                    var pathIndex = i;\n                    while (read.path[pathIndex].node !== nodeIndex) {\n                        pathIndex += 1;\n                    }\n                    var y = read.path[pathIndex].y;\n                    if (mm.type === 'insertion') {\n                        if (config.showSoftClips || (mm.pos !== read.firstNodeOffset || i !== 0) && (mm.pos !== read.finalNodeCoverLength || i !== read.sequenceNew.length - 1)) {\n                            drawInsertion(x - 3, y + 7, mm.seq, node.y);\n                        }\n                    } else if (mm.type === 'deletion') {\n                        var x2 = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.length);\n                        drawDeletion(x, x2, y + 4, node.y);\n                    } else if (mm.type === 'substitution') {\n                        var _x = getXCoordinateOfBaseWithinNode(node, mm.pos + mm.seq.length);\n                        drawSubstitution(x + 1, _x, y + 7, node.y, mm.seq);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction drawInsertion(x, y, seq, nodeY) {\n    svg.append('text').attr('x', x).attr('y', y).text('*').attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).on('mouseover', insertionMouseOver).on('mouseout', insertionMouseOut).append('svg:title').text(seq);\n}\nfunction drawSubstitution(x1, x2, y, nodeY, seq) {\n    svg.append('text').attr('x', x1).attr('y', y).text(seq).attr('font-family', 'Courier, \"Lucida Console\", monospace').attr('font-size', '12px').attr('fill', 'black').attr('nodeY', nodeY).attr('rightX', x2).on('mouseover', substitutionMouseOver).on('mouseout', substitutionMouseOut);\n}\nfunction drawDeletion(x1, x2, y, nodeY) {\n    svg.append('line').attr('x1', x1).attr('y1', y - 1).attr('x2', x2).attr('y2', y - 1).attr('stroke-width', 7).attr('stroke', 'grey').attr('nodeY', nodeY).on('mouseover', deletionMouseOver).on('mouseout', deletionMouseOut);\n}\nfunction insertionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x = Number(d3.select(this).attr('x'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'insertionHighlight').attr('x1', x + 4).attr('y1', y - 10).attr('x2', x + 4).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction deletionMouseOver() {\n    d3.select(this).attr('stroke', 'red');\n    var x1 = Number(d3.select(this).attr('x1'));\n    var x2 = Number(d3.select(this).attr('x2'));\n    var y = Number(d3.select(this).attr('y1'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x1).attr('y1', y - 3).attr('x2', x1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'deletionHighlight').attr('x1', x2).attr('y1', y - 3).attr('x2', x2).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction substitutionMouseOver() {\n    d3.select(this).attr('fill', 'red');\n    var x1 = Number(d3.select(this).attr('x'));\n    var x2 = Number(d3.select(this).attr('rightX'));\n    var y = Number(d3.select(this).attr('y'));\n    var yTop = Number(d3.select(this).attr('nodeY'));\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x1 - 1).attr('y1', y - 7).attr('x2', x1 - 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n    svg.append('line').attr('class', 'substitutionHighlight').attr('x1', x2 + 1).attr('y1', y - 7).attr('x2', x2 + 1).attr('y2', yTop + 5).attr('stroke-width', 1).attr('stroke', 'black');\n}\nfunction insertionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.insertionHighlight').remove();\n}\nfunction deletionMouseOut() {\n    d3.select(this).attr('stroke', 'grey');\n    d3.selectAll('.deletionHighlight').remove();\n}\nfunction substitutionMouseOut() {\n    d3.select(this).attr('fill', 'black');\n    d3.selectAll('.substitutionHighlight').remove();\n}","module.exports={ \"BACKEND_URL\": false,\n  \"DATA_SOURCES\": [\n  { \"name\": \"snp1kg-BRCA1\",\n    \"xgFile\": \"snp1kg-BRCA1.vg.xg\",\n    \"gamIndex\": \"NA12878-BRCA1.gam.index\",\n    \"anchorTrackName\": \"17\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n  { \"name\": \"cactus\",\n    \"xgFile\": \"cactus.vg.xg\",\n    \"gamIndex\": \"cactus-NA12879.gam.index\",\n    \"anchorTrackName\": \"ref\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n  { \"name\": \"vg \\\"small\\\" example\",\n    \"xgFile\": \"x.vg.xg\",\n    \"gbwtFile\": \"x.vg.gbwt\",\n    \"anchorTrackName\": \"x\",\n    \"useMountedPath\": false,\n    \"defaultPosition\": \"1\" },\n]}\n\n","module.exports={\"BACKEND_URL\": \"https://api.wbeyer.com\"}\n","// JSON Konstruktor für die Überprüfung ob ein Objekt JSON ist\r\nvar jsonC = {}.constructor ;\r\n\r\nvar isJSON = function(json){\r\n\tif(json && json.constructor === jsonC){\r\n\t\treturn true ;\r\n\t}else{\r\n\t\treturn false ;\r\n\t}\r\n}\r\n\r\nexports.isJSON = isJSON ;\r\n\r\n\r\nvar mergeJSON = function(json1, json2){\r\n\tvar result = null ;\r\n\tif(isJSON(json2)){\r\n\t\tresult = {} ;\r\n\t\tif(isJSON(json1)){\r\n\t\t\tfor(var key in json1){\r\n\t\t\t\tresult[key] = json1[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(var key in json2){\r\n\t\t\tif(typeof result[key] === \"object\" && typeof json2 === \"object\"){\r\n\t\t\t\tresult[key] = mergeJSON(result[key], json2[key]) ;\r\n\t\t\t}else{\r\n\t\t\t\tresult[key] = json2[key] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else if(Array.isArray(json1) && Array.isArray(json2)){\r\n\t\tresult = json1 ;\r\n\r\n\t\tfor(var i = 0; i < json2.length; i++){\r\n\t\t\tif(result.indexOf(json2[i]) === -1){\r\n\t\t\t\tresult[result.length] = json2[i] ;\r\n\t\t\t}\r\n\t\t}\r\n\t}else{\r\n\t\tresult = json2 ;\r\n\t}\r\n\r\n\treturn result ;\r\n}\r\n\r\nexports.merge = mergeJSON ;\r\n"]}